[{"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\index.js":"1","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\reportWebVitals.js":"2","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\App.js":"3","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\CreateRoom.js":"4","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\CreateChannel.js":"5","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Home.js":"6","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PodcastPortal.js":"7","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Login.js":"8","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Editor.js":"9","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\InitJoinRoom.js":"10","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\context\\auth-context.js":"11","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Signup.js":"12","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Review.js":"13","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EditFileDiscription.js":"14","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EditorFiles.js":"15","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PodcastRoom.js":"16","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Navbar.js":"17","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EpisodeDisplay.js":"18","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Checkbeforjoining.js":"19","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\loading.js":"20","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AllGuests.js":"21","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Reactmic.js":"22","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Copyright.js":"23","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Files.js":"24","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Deposits.js":"25","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Gif.js":"26","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AllUsers.js":"27","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AudioProcess.js":"28","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\FindEpisode.js":"29","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PageNotFound404.js":"30","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\ShowEpisode.js":"31","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\ChannelInfo.js":"32","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\SuccessPage.js":"33"},{"size":517,"mtime":1624541343862,"results":"34","hashOfConfig":"35"},{"size":375,"mtime":1624541343864,"results":"36","hashOfConfig":"35"},{"size":2728,"mtime":1625587637578,"results":"37","hashOfConfig":"35"},{"size":3545,"mtime":1624541343830,"results":"38","hashOfConfig":"35"},{"size":7849,"mtime":1625584263485,"results":"39","hashOfConfig":"35"},{"size":671,"mtime":1625587669441,"results":"40","hashOfConfig":"35"},{"size":516,"mtime":1624541343846,"results":"41","hashOfConfig":"35"},{"size":4296,"mtime":1625422281772,"results":"42","hashOfConfig":"35"},{"size":4356,"mtime":1625587095990,"results":"43","hashOfConfig":"35"},{"size":4072,"mtime":1625422281771,"results":"44","hashOfConfig":"35"},{"size":349,"mtime":1625575713683,"results":"45","hashOfConfig":"35"},{"size":5610,"mtime":1625422281779,"results":"46","hashOfConfig":"35"},{"size":1971,"mtime":1625586763859,"results":"47","hashOfConfig":"35"},{"size":2677,"mtime":1625586235266,"results":"48","hashOfConfig":"35"},{"size":5949,"mtime":1625586744529,"results":"49","hashOfConfig":"35"},{"size":3819,"mtime":1625422281775,"results":"50","hashOfConfig":"35"},{"size":3730,"mtime":1625587635172,"results":"51","hashOfConfig":"35"},{"size":2983,"mtime":1625585836430,"results":"52","hashOfConfig":"35"},{"size":1146,"mtime":1625422281757,"results":"53","hashOfConfig":"35"},{"size":1415,"mtime":1624541343854,"results":"54","hashOfConfig":"35"},{"size":393,"mtime":1625397235372,"results":"55","hashOfConfig":"35"},{"size":4481,"mtime":1625466513385,"results":"56","hashOfConfig":"35"},{"size":399,"mtime":1624541343827,"results":"57","hashOfConfig":"35"},{"size":2684,"mtime":1625422281767,"results":"58","hashOfConfig":"35"},{"size":2521,"mtime":1625422281760,"results":"59","hashOfConfig":"35"},{"size":525,"mtime":1624541343838,"results":"60","hashOfConfig":"35"},{"size":2201,"mtime":1625422281756,"results":"61","hashOfConfig":"35"},{"size":846,"mtime":1624541343825,"results":"62","hashOfConfig":"35"},{"size":1969,"mtime":1625584704866,"results":"63","hashOfConfig":"35"},{"size":184,"mtime":1625422281774,"results":"64","hashOfConfig":"35"},{"size":2749,"mtime":1625468078875,"results":"65","hashOfConfig":"35"},{"size":2110,"mtime":1625480977542,"results":"66","hashOfConfig":"35"},{"size":1208,"mtime":1625584393009,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"ymght2",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"70"},"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\index.js",[],["144","145"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\reportWebVitals.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\App.js",["146"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\CreateRoom.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\CreateChannel.js",["147","148"],"import React, { useContext } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { InputLabel, NativeSelect,createMuiTheme,ThemeProvider } from '@material-ui/core';\r\nimport {  gql, useMutation,useQuery } from '@apollo/client'\r\nimport defaultimage from '../default.jpg'\r\nimport AuthContext from '../context/auth-context'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\nconst CREATE_CHANNEL = gql`\r\n  mutation CreateChannel($file:Upload!,$channelname:String,$discription:String,$contenttype:String,$language:String,$country:String,$creator:String){\r\n    CreateChannel(file:$file,channelname:$channelname,discription:$discription,contenttype:$contenttype,language:$language,country:$country,creator:$creator)\r\n  }\r\n`\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100vh',\r\n  },\r\n  image: {\r\n    margin:60,\r\n    \r\n  },\r\n  img:{\r\n    width:\"70vh\",\r\n    hight:\"70vh\"\r\n  },\r\n  \r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n    button:{\r\n    width:\"100%\",\r\n    backgroundColor:\"#01579b\",\r\n    color:\"#ffffff\",\r\n    '&:hover': {\r\n      background: \"#006064\",  \r\n   }\r\n  },\r\n\r\n  buttondisable:{\r\n    width:\"100%\",\r\n    backgroundColor:\"#039be5\"\r\n  },\r\n\r\n  form:{\r\n    marginTop:20,\r\n    width:\"100%\",\r\n\r\n  },\r\n  textfield:{\r\n    width:\"100%\",\r\n\r\n  },\r\n  \r\n}));\r\n\r\n\r\n\r\n\r\nexport default function CreateChannel() {\r\n  const auth = useContext(AuthContext)\r\n\r\n   const classes = useStyles();\r\n  \r\n\r\n\r\n \r\n  const[createchannel] = useMutation(CREATE_CHANNEL,{\r\n    onCompleted: data => {\r\n      setState({_issubmitted:true})\r\n      alert(\"your Channel has been creates successfully you will be redirected to login page\")\r\n    },\r\n    onError:err=>console.log(err)\r\n  })\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n     \r\n    },\r\n  });\r\n\r\n  const[contenttype,setContenttype]=React.useState('none')\r\n  const[country,setContry]=React.useState('none')\r\n  const[language,setLanguage]=React.useState('none')\r\n  const[file,setFile]=React.useState('none')\r\n  const [state,setState] = React.useState({\r\n    file:defaultimage,\r\n    _issubmitted:false\r\n  })\r\n  const[accepted,setAccepted] = React.useState(false)\r\n  const handleChange = (event) => {\r\n\r\n    switch(event.target.name){\r\n      case 'contenttype':\r\n        setContenttype({contenttype:event.target.value})\r\n        break\r\n      case 'country':\r\n        setContry({country:event.target.value})\r\n        console.log(country)\r\n        break\r\n      case 'language':\r\n        setLanguage({language:event.target.value})\r\n     \r\n        break\r\n      case 'accepted':\r\n        if(accepted) setAccepted(false)\r\n        else setAccepted(true)\r\n       \r\n        break\r\n      case 'file':\r\n        let file=URL.createObjectURL(event.target.files[0])\r\n        setState({file:file})\r\n        setFile(event.target.files[0])\r\n        \r\n        break\r\n    }\r\n    \r\n  }\r\n\r\n  const channelNameRef = React.useRef()\r\n  const discriptionRef = React.useRef()\r\n\r\n  const handleSubmit =(e)=>{\r\n    e.preventDefault()\r\n    const channelname = channelNameRef.current.value\r\n    const discription = discriptionRef.current.value\r\n    const filefinal = file\r\n    const countryfinal = country.country\r\n    const contenttypefinal = contenttype.contenttype\r\n    const languagefinal = language.language\r\n    console.log(file)\r\n    if(channelname.trim() !== \"\" || discription.trim() !== \"\"){\r\n      console.log(\"form submitted\")\r\n      setState({_issubmitted:true})\r\n      console.log(auth.userId)\r\n      createchannel({variables:{file:filefinal,channelname,\r\n        discription,country:countryfinal,contenttype:contenttypefinal,\r\n        language:languagefinal,creator:auth.userId}})\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  if(!auth.isGuest) return <Redirect to=\"channelinfo\"/>\r\n\r\n  \r\n\r\n  if(!state._issubmitted){\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={5}  >\r\n        <div className={classes.image}>\r\n          <img src={state.file} className={classes.img} alt=\"pic\"/>\r\n        </div>\r\n        </Grid>\r\n      <Grid item xs={12} sm={8} md={7} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Create your channel\r\n        </Typography>\r\n\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate> \r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n          <TextField className={classes.textfield} inputRef={channelNameRef} \r\n          id=\"outlined-basic\" label=\"Channel Name\" variant=\"outlined\"  required />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <TextField\r\n          inputRef={discriptionRef}\r\n          className={classes.textfield} \r\n          id=\"outlined-textarea\"\r\n          label=\"Discription About Channel\"\r\n          rows={4}\r\n          multiline\r\n          variant=\"outlined\"\r\n          required\r\n        />\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n          <InputLabel>Country</InputLabel>\r\n          <NativeSelect\r\n          id=\"demo-customized-select-native\"\r\n          value={country.country}\r\n          onChange={handleChange}\r\n          name=\"country\"\r\n         \r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n          <option value={\"India\"}>India</option>\r\n          \r\n        </NativeSelect>\r\n        \r\n          </Grid>\r\n\r\n\r\n          <Grid item xs={4}>\r\n          <InputLabel>Language</InputLabel>\r\n          <NativeSelect\r\n          id=\"demo-customized-select-native\"\r\n          value={language.language}\r\n          onChange={handleChange}\r\n          name=\"language\"\r\n         \r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n          <option value={\"English\"}>English</option>\r\n          \r\n        </NativeSelect>\r\n        \r\n          </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n          <InputLabel>Content Type</InputLabel>\r\n          <NativeSelect\r\n          id=\"demo-customized-select-native\"\r\n          value={contenttype.contenttype}\r\n          name=\"contenttype\"\r\n          onChange={handleChange}\r\n         \r\n        >\r\n          <option aria-label=\"None\" value=\"\" />\r\n          <option value={\"Education\"}>Education</option>\r\n          \r\n        </NativeSelect>\r\n        \r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <Button variant=\"contained\" component=\"label\">Add Cover Image\r\n            <input type=\"file\" accept=\"image/png, image/jpeg\" hidden name=\"file\" onChange={handleChange}/>\r\n            </Button>\r\n          \r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={<Checkbox  onChange={handleChange} name=\"accepted\" value={accepted}/>}\r\n            label=\"Accept Terms and Conditons\"\r\n          />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n          {accepted?\r\n          <Button type=\"submit\" className={classes.button}>Create My Channel</Button>\r\n          :<Button type=\"submit\" className={classes.buttondisable} disabled>Create My Channel</Button>}\r\n          </Grid>\r\n          \r\n          \r\n        </Grid>\r\n\r\n       \r\n\r\n        </form>\r\n       \r\n\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n    </ThemeProvider>\r\n  );\r\n   }\r\n   else{\r\n\r\n     return (<Redirect to=\"/success\"/>)\r\n   }\r\n}","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Home.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PodcastPortal.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Login.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Editor.js",["149"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\InitJoinRoom.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\context\\auth-context.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Signup.js",["150","151","152"],"import {Redirect} from 'react-router-dom'\r\nimport React,{useState} from 'react';\r\nimport {Avatar,Button,CssBaseline,TextField,Link,Grid,\r\n  Typography,makeStyles,ThemeProvider,Container} from '@material-ui/core';\r\nimport {gql,useMutation} from '@apollo/client'\r\nimport {LockOutlined} from '@material-ui/icons';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"#000000\",\r\n\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: \"#000000\",\r\n    '&:hover': {\r\n        background: \"#424242\",\r\n     },\r\n  },\r\n  submitCreator:{\r\n    backgroundColor:\"#00bcd4\",\r\n    color:\"#000000\",\r\n    '&:hover': {\r\n      \r\n      backgroundColor:\"#4dd0e1\"\r\n   },\r\n  }\r\n}));\r\n\r\nconst UPLOAD_USER = gql`\r\nmutation($username:String,$email:String,$password:String,$isGuest:Boolean){\r\n      Signup(username:$username,email:$email,password:$password,isGuest:$isGuest){\r\n       _id\r\n       username\r\n       email\r\n       isGuest\r\n      }\r\n   }\r\n`\r\nexport default function Userlogin(){\r\n\r\n    \r\n  const[accepted,setAccepted] = React.useState(false)\r\n  const handleChange = ()=>{\r\n    if(accepted) setAccepted(false)\r\n    else setAccepted(true)\r\n  }\r\n    \r\n    const [state, setState] = useState({\r\n    _issubmitted:false\r\n    });\r\n\r\n    const [createUser] = useMutation(UPLOAD_USER,{\r\n      onCompleted:data=>{\r\n      setState({_issubmitted:true})}\r\n      \r\n  })\r\n\r\n    const firstNameRef = React.useRef()\r\n    const lastNameRef = React.useRef()\r\n    const passwordRef = React.useRef()\r\n    const emailRef = React.useRef()\r\n \r\n    const handleSubmit=(e)=>{\r\n       e.preventDefault()\r\n        const firstName = firstNameRef.current.value\r\n        const lastName = lastNameRef.current.value\r\n        const password = passwordRef.current.value\r\n        const email = emailRef.current.value\r\n        const isGuest = !accepted\r\n        if(firstName.trim() === null ||\r\n           lastName.trim()=== null ||\r\n           password.trim() === null ||\r\n           email.trim() === null){\r\n                console.log(\"enter the data\")\r\n           }\r\n        else{\r\n            setState({_issubmitted:true})\r\n         \r\n            createUser({variables:{username:firstName,email:email,password:password,isGuest:isGuest}})\r\n            \r\n        }\r\n\r\n    }\r\n\r\n\r\n    //this is all for themes\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n          type: 'light'\r\n        },\r\n      });\r\n  const classes = useStyles();\r\n  \r\n  if(!state._issubmitted){\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n   <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlined />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                inputRef={firstNameRef}\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                \r\n                variant=\"outlined\"\r\n                inputRef={lastNameRef}\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                inputRef={emailRef}\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                inputRef={passwordRef}\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n            </Grid>\r\n            \r\n            \r\n          </Grid>\r\n        \r\n          \r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            name=\"submit\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          \r\n          <Grid container justify=\"\">\r\n            <Grid item>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      \r\n    </Container>\r\n    </ThemeProvider>\r\n  );\r\n  }\r\n  else{\r\n    if(state._issubmitted) return <Redirect to='/login'/>\r\n  }\r\n}\r\n\r\n\r\n","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Review.js",["153","154"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EditFileDiscription.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EditorFiles.js",["155","156"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PodcastRoom.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Navbar.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\EpisodeDisplay.js",["157","158","159"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Checkbeforjoining.js",["160"],"\r\nimport { useContext,useEffect } from 'react'\r\nimport AuthContext from '../context/auth-context'\r\nimport {gql, useMutation} from '@apollo/client'\r\nimport { Redirect } from 'react-router'\r\n\r\nconst ADD_GUEST = gql`\r\nmutation ($guestid:String,$roomid:String){\r\n  addToRoom(guestid:$guestid,roomid:$roomid)\r\n}\r\n`\r\n\r\nexport default function Checkbeforjoining(param){\r\n   \r\n    const auth = useContext(AuthContext)\r\n    \r\n    let info ={\r\n        room:param.roomid,\r\n        userid:auth.userId\r\n    }\r\n\r\n    const [addUser,{loading,data}] = useMutation(ADD_GUEST,{\r\n\r\n        onCompleted:(data)=>{\r\n            console.log(data)\r\n        },\r\n        onError:(error)=>{\r\n            console.log(error)\r\n        },\r\n    })\r\n\r\n\r\n    useEffect(()=>{\r\n        addUser({variables:{guestid:info.userid,roomid:info.room}})\r\n    })\r\n\r\n    // const handle =(info)=>{\r\n        \r\n    // }\r\n\r\n    // handle(info) \r\n    \r\n   \r\n    \r\n    // if(loading || data===null){\r\n    //     console.log(data)\r\n    //  return <p>loading.........</p>\r\n    // }\r\n    \r\n    if(loading) return <p>loading</p>\r\n        return(<Redirect to={`roomID=${info.room}`}/>)\r\n\r\n    \r\n    \r\n}","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\loading.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AllGuests.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Reactmic.js",["161","162"],"\r\nimport React, { useContext,useState } from 'react' \r\n\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport { IconButton,Button, makeStyles} from '@material-ui/core'\r\nimport { useParams,Link } from 'react-router-dom';\r\nimport AuthContext from '../context/auth-context'\r\nimport {  KeyboardArrowRight, Mic } from '@material-ui/icons';\r\nimport Recorder from 'recorder-js';\r\nimport Gif from './Gif'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n   \r\n    textDecoration:'none'\r\n  },\r\n  \r\n  container:{\r\n    padding:10\r\n  },\r\n  control:{\r\n    margin:10,\r\n    display:\"flex\"\r\n  },\r\n  icon:{\r\n    // flex:1,\r\n  \r\n    backgroundColor:\"#FFFFFF\",\r\n    textAlign:\"center\",\r\n    color:\"#000000\",\r\n    '&:hover':{\r\n      color:\"red\"\r\n    }\r\n  },\r\n\r\n  iconClick:{\r\n    color:\"red\",\r\n    backgroundColor:\"#424242\"\r\n  },\r\n  iconmic:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"#ff4848\",\r\n    \r\n  },\r\n  gif:{\r\n    flex:1,\r\n    justifyItems:\"contain\",\r\n    margin:14\r\n  },\r\n  iconnext:{\r\n    color:\"lightgreen\"\r\n  },\r\n  donebutton:{\r\n    color:\"#ffffff\",\r\n    justifyItems:\"center\"\r\n  }\r\n\r\n}))\r\n\r\n\r\n\r\n\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\nexport default function Test(param){\r\n    const classes = useStyles();\r\n    const auth = useContext(AuthContext)\r\n    const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n    const recorder = new Recorder(audioContext);\r\n        const { room } = useParams()\r\nconsole.log(param)\r\n      \r\n      const [recording,setRecording] = useState(false)\r\n      const [file,setFile] = useState(null)\r\n\r\n          const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n\r\n  navigator.mediaDevices.getUserMedia({audio: true})\r\n  .then(stream => recorder.init(stream))\r\n  .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n\r\n\r\n  const startRecording=()=>{\r\n      \r\n\r\n    recorder.start()\r\n      .then(() => setRecording(true));\r\n      console.log(recording)\r\n  }\r\n\r\n  const stopRecording=()=>{\r\n    \r\n    recorder.stop()\r\n      .then(({blob, buffer}) => {\r\n        setRecording(false)\r\n        setFile(blob);\r\n        console.log(recording)\r\n        console.log(blob)\r\n      });\r\n      if(file != null){\r\n        let speaker = auth.userId\r\n        uploadFile({variables:{file:file,roomid:room,speaker:speaker}})\r\n      }\r\n      \r\n  }\r\n \r\n  \r\n\r\n  // if(!recording){\r\n\r\n  return(\r\n             \r\n\r\n        <div className={classes.container}>\r\n          <div className={classes.control}>\r\n          <div className={classes.gif}>\r\n            {recording?<Gif/>:<p/>}\r\n          </div>\r\n           \r\n           \r\n            <Button color=\"\" onClick={startRecording}>Record</Button>\r\n            <Button color=\"secondary\" onClick={stopRecording}>Stop</Button>\r\n\r\n\r\n           \r\n\r\n            {(param.creator === auth.userId)? <IconButton className={classes.iconnext}><Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}> <KeyboardArrowRight/>\r\n            \r\n            </Link></IconButton> :<p/> }\r\n            \r\n           \r\n             \r\n         \r\n            \r\n\r\n          </div>\r\n        </div>\r\n  )\r\n//           }\r\n\r\n//           else{\r\n//       return(                   \r\n\r\n//         <div className={classes.container}>\r\n//         <div className={classes.control}>\r\n//         <div className={classes.gif}>\r\n//           <Gif/>\r\n//         </div>\r\n         \r\n         \r\n//           <IconButton\r\n//           className={ classes.iconClick} \r\n//           onClick={ stopRecording }>\r\n          \r\n//               <Mic/>\r\n           \r\n//           </IconButton>\r\n//           {/* <Button \r\n//           className={ classes.iconmic\r\n//           } \r\n//           onClick={ stopRecording }>\r\n           \r\n              \r\n           \r\n//           </Button> */}\r\n//           <IconButton className={classes.iconnext} disabled>\r\n//             {/* <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}> */}\r\n           \r\n//               <KeyboardArrowRight/>\r\n            \r\n//             {/* </Link> */}\r\n//           </IconButton>\r\n          \r\n\r\n//         </div>\r\n//       </div>\r\n// )\r\n//           }\r\n}","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Copyright.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Files.js",["163","164","165","166","167"],"\r\nimport React from 'react'\r\n\r\nimport {  gql, useQuery } from '@apollo/client'\r\n\r\nimport { useParams } from 'react-router'\r\nimport AllGuests from './AllGuests'\r\n\r\nimport { Icon, IconButton, makeStyles,LinearProgress } from '@material-ui/core'\r\nimport { PlayCircleFilledOutlined } from '@material-ui/icons';\r\n\r\nimport Loading from './loading'\r\n\r\nconst SHOW_FILE = gql`\r\n  query file ($roomid:String){\r\n      files(roomid:$roomid){\r\n        _id\r\n        speaker\r\n        file\r\n        speech\r\n      }\r\n  }\r\n`\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n      box:{\r\n        display:'block'\r\n      },\r\n      tab:{\r\n       \r\n        listStyleType:\"none\",\r\n        borderRadius:\"10px\",\r\n        backgroundColor:\"#D6D5B3\",\r\n        margin:20,\r\n        fontWeight:\"bold\",\r\n        fontSize:\"20px\"\r\n      },\r\n      tabhead:{\r\n      paddingLeft:20,\r\n      paddingTop:\"10px\",\r\n      color:\"#000000\",\r\n      \r\n      },\r\n      speech:{\r\n        fontSize:\"18px\",\r\n        fontWeight:\"100\",\r\n        paddingLeft:20,\r\n        paddingRight:20\r\n      },\r\n      container:{\r\n        // display:\"flex\",\r\n        color:\"#000000\",\r\n\r\n      },\r\n      icon:{\r\n        color:\"#000000\"\r\n      }\r\n\r\n}))\r\nexport default function FS(){\r\n\r\n  \r\n    \r\n    const classes = useStyles();\r\n    \r\n\r\n    const { room } = useParams()\r\n    \r\n    const{ loading,err,data} = useQuery(SHOW_FILE,{\r\n      variables: {roomid:room},\r\n      pollInterval: 500,\r\n    })\r\n   \r\n    if(loading) return <Loading/>\r\n   \r\n   \r\n\r\n    let audio = []\r\n \r\n      if(data === undefined || err || data === null){\r\n        audio = []\r\n      }\r\n      \r\n      else{\r\n    data.files.map((voice)=>{\r\n        \r\n        audio.push(\r\n        <li key={voice._id} className={classes.tab} >\r\n          <div className={classes.container}>\r\n          <div className={classes.tabhead}>\r\n          <AllGuests params={voice.speaker}/>\r\n          </div>\r\n          <p className={classes.speech}>{voice.speech}</p>\r\n          </div>\r\n          <div>\r\n            {/* <IconButton className={classes.icon}>\r\n              <Icon>\r\n                <PlayCircleFilledOutlined/>\r\n              </Icon>\r\n            </IconButton> */}\r\n        <audio key={voice._id}  controls>\r\n           <source  src={`http://localhost:4000/audio/${voice.file}`} type=\"audio/wav\"></source>\r\n        </audio>\r\n        {/*</div>*/}\r\n        </div>\r\n        </li>\r\n        )\r\n        }\r\n       \r\n    )\r\n      }\r\n    \r\n\r\n\r\n\r\n\r\nif(data.files[0] === undefined){\r\n  console.log(data)\r\n  return(<h1>lets start.... </h1>)\r\n}\r\n\r\nelse{\r\n \r\n    return(\r\n     \r\n      <div className={classes.box}>\r\n        <ul>\r\n        {audio}\r\n        </ul>\r\n\r\n      \r\n      </div>\r\n    )\r\n}\r\n    \r\n}\r\n\r\n\r\n","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Deposits.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\Gif.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AllUsers.js",["168","169"],"import React from 'react'\r\nimport {  gql, useQuery } from '@apollo/client'\r\nimport { useParams } from 'react-router'\r\nimport AllGuests from './AllGuests'\r\nimport { createMuiTheme, Icon, makeStyles, ThemeProvider, Grid } from '@material-ui/core'\r\nimport {  FaceSharp } from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles({\r\n  container:{\r\n    \r\n\r\n    overflowY:\"hidden\"\r\n  },\r\n\r\n  avatar:{\r\n    width:100,\r\n    fontSize:\"20px\",\r\n    textAlign:\"center\",\r\n    margin:4,\r\n    padding:4,\r\n    width:\"100%\",\r\n    height:70,\r\n    borderRadius:10,\r\n    backgroundColor:\"#5DB7DE\",\r\n    color:\"#000000\"\r\n  },\r\n  orangeAvatar:{\r\n   \r\n    fontSize:\"20px\",\r\n    textAlign:\"center\",\r\n    margin:4,\r\n    padding:4,\r\n    width:\"100%\",\r\n    height:70,\r\n    borderRadius:10,\r\n    backgroundColor:\"#FF7F11\",\r\n    color:\"#000000\"\r\n  },\r\n  purpleAvatar:{\r\n   \r\n    fontSize:\"20px\",\r\n    textAlign:\"center\",\r\n    margin:4,\r\n    padding:4,\r\n    width:\"100%\",\r\n    height:70,\r\n    borderRadius:10,\r\n    backgroundColor:\"#F08080\",\r\n    color:\"#000000\"\r\n  },\r\n \r\n});\r\n\r\n\r\nconst SHOW_FILE = gql`\r\n query listGuests($roomId:String){\r\n  \r\n    listGuests(roomId:$roomId)\r\n  \r\n }\r\n`\r\nexport default function FS(){\r\n\r\n    const theme = createMuiTheme({\r\n      palette:{\r\n        type:\"dark\"\r\n      }\r\n    })\r\n\r\n    const classes = useStyles();\r\n    const { room } = useParams()\r\n    \r\n    const{ loading,data} = useQuery(SHOW_FILE,{\r\n      variables: {roomId:room},\r\n      pollInterval:500,\r\n    })\r\n \r\n    if (loading) return null\r\n\r\n     \r\n    let guestList = []\r\n   \r\n    let classNameHolder = [classes.avatar,classes.orangeAvatar,classes.purpleAvatar]\r\n    if(data){\r\n      data.listGuests.map(guest=>{\r\n        guestList.push(\r\n      <Grid item xs={6}>\r\n        <div key={guest} className={classNameHolder[Math.floor(Math.random()*3)]} >\r\n        <Icon>\r\n          <FaceSharp/>\r\n        </Icon>\r\n        <br></br>\r\n        <AllGuests params={guest}/><br></br>\r\n        </div>\r\n      </Grid>\r\n      )\r\n      })\r\n    }\r\n    \r\n\r\n    return(\r\n     <ThemeProvider theme={theme}>\r\n       <h3>Joined Guests</h3>\r\n        <Grid container spacing={3}>\r\n        {guestList}\r\n         </Grid>\r\n     </ThemeProvider>\r\n    )\r\n}\r\n\r\n\r\n\r\n","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\AudioProcess.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\FindEpisode.js",["170","171","172","173","174","175","176"],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\PageNotFound404.js",[],"D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\ShowEpisode.js",["177","178","179","180","181","182"],"\r\nimport {gql, useMutation, useQuery} from '@apollo/client';\r\nimport {useContext} from 'react'\r\nimport { createMuiTheme, Grid, makeStyles, Paper, ThemeProvider } from '@material-ui/core'\r\nimport logo from '../logo.svg'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        margin:20,\r\n        width:\"60%\",\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n      },\r\n\r\n    image:{\r\n      width:\"100%\",\r\n      height:\"100%\"\r\n    },\r\n    header:{\r\n      fontWeight:\"bold\"\r\n    },\r\n    discription:{\r\n      fontSize:\"12\"\r\n    },\r\n    container:{\r\n      width:\"100%\",\r\n      height:\"100%\",\r\n      display:\"flex\",\r\n      \r\n\r\n    },\r\n    box:{\r\n      flex:1,\r\n      padding:10\r\n    },\r\n    imgbox:{\r\n      flex:2,\r\n      padding:10\r\n    },\r\n    audio:{\r\n      width:\"100%\"\r\n    }\r\n}))\r\n\r\nconst GET_EPISODE = gql`\r\n   query reviewEpisode($EpisodeID:String){\r\n    reviewEpisode(EpisodeID:$EpisodeID){\r\n        EpisodeName\r\n        discription\r\n        audioFile\r\n        img\r\n        \r\n    }\r\n  }\r\n`\r\n\r\nexport default function ShowEpisode(param){\r\n\r\n  const classes = useStyles()\r\n\r\n\r\n   const{ loading,data} = useQuery(GET_EPISODE,{\r\n      variables: {EpisodeID:param.param},\r\n    //   pollInterval: 500,\r\n    })\r\n   if(loading)return <p>loading..</p>\r\n\r\n   \r\n  if(data){\r\n     console.log(`http://localhost:4000/pythonAudio/${data.reviewEpisode.audioFile}`)\r\n  return (\r\n\r\n          \r\n        \r\n            <React.Fragment>\r\n            <Paper className={classes.paper}>\r\n            <div className={classes.container}>\r\n\r\n            <div className={classes.imgbox}>\r\n            <img className={classes.image} src={`http://localhost:4000/images/${data.reviewEpisode.img}`} alt=\"pic\"/>\r\n            </div>\r\n            <div className={classes.box}>\r\n            <h1>{data.reviewEpisode.EpisodeName}</h1>\r\n            <h3>{data.reviewEpisode.discription}</h3>\r\n            <audio controls className={classes.audio}>\r\n              {data.reviewEpisode.audioFile}\r\n              <source src={`http://localhost:4000/pythonAudio/${data.reviewEpisode.audioFile}`} type=\"audio/wav\"></source>\r\n              \r\n            </audio>\r\n            </div>\r\n            </div>\r\n            </Paper>\r\n            </React.Fragment>\r\n  \r\n          \r\n          \r\n     \r\n      )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n // <Paper className={classes.paper}>\r\n           \r\n //            <img className={classes.image} src={`http://localhost:4000/images/${data.reviewEpisode.img}`} alt=\"pic\"/>\r\n //            <p classesName={classes.header}>{data.reviewEpisode.EpisodeName}</p>\r\n //            <p classesName={classes.discription}>{data.reviewEpisode.discription}</p>\r\n            \r\n //            </Paper>","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\ChannelInfo.js",["183","184","185"],"import React,{useContext} from 'react'\r\nimport {ThemeProvider,createMuiTheme, makeStyles,Paper,Container,Grid} from '@material-ui/core'\r\nimport Navbar from './Navbar'\r\nimport logo from '../logo.svg'\r\nimport {  gql, useQuery } from '@apollo/client'\r\nimport AuthContext from '../context/auth-context'\r\nimport AllGuests from './AllGuests'\r\nimport {Redirect} from 'react-router-dom'\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark'\r\n  },\r\n\r\n});\r\n\r\nconst SHOW_CHANNEL = gql`\r\n  query channelInfo ($userId:String){\r\n      channelInfo(userId:$userId){\r\n       channelName\r\n       profileImage\r\n       discription\r\n       language\r\n       country\r\n       contenttype\r\n       creator\r\n      }\r\n  }\r\n`\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\tcontainer:{\r\n\t\tpadding:20,\r\n\t\twidth:\"100%\",\r\n\t\theight:\"100vh\",\r\n\t\tdisplay:\"flex\"\r\n\t},\r\n\timg:{\r\n\t\twidth:\"100%\",\r\n\t\theight:\"70%\",\r\n\t\t},\r\n\tbox:{\r\n\t\t\r\n\t\tpadding:20\r\n\t}\r\n}))\r\n\r\nexport default function ChannelInfo(){\r\n\tconst auth = useContext(AuthContext)\r\n\tconst classes = useStyles();\r\n\t const{ loading,err,data} = useQuery(SHOW_CHANNEL,{\r\n      variables: {userId:auth.userId},\r\n    })\r\n\r\n\t if(loading)return<p>loading</p>\r\n\r\n\t if(auth.isGuest) return <Redirect to=\"createchannel\"/>\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<Navbar/>\r\n\t\t\t<Container maxWidth=\"lg\">\r\n\t\t\t<Paper className={classes.container}>\r\n\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={4}>\r\n\t\t\t\t<img className={classes.img} src={`http://localhost:4000/images/${data.channelInfo.profileImage}`}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={4}>\r\n\t\t\t\t\t<h1>{data.channelInfo.channelName}</h1>\r\n\t\t\t\t\t<h3>{data.channelInfo.discription}</h3>\r\n\t\t\t\t\t<h3>{data.channelInfo.country}</h3>\r\n\t\t\t\t\t<h3>{data.channelInfo.language}</h3>\r\n\t\t\t\t\t<h3>{data.channelInfo.contenttype}</h3>\r\n\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={4}>\r\n\t\t\t\t\t<h1><AllGuests params={data.channelInfo.creator}/></h1>\r\n\t\t\t\t\t<h2>Created on</h2>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Paper>\r\n\t\t\t</Container>\r\n\t\t\t</ThemeProvider>\r\n\t\t</React.Fragment>\r\n\t\t)\r\n}","D:\\ProjectFolder\\Podcast Builder\\frontend\\src\\components\\SuccessPage.js",["186"],"import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Button,Link,makeStyles} from '@material-ui/core'\r\nimport AuthContext from '../context/auth-context'\r\nimport {Redirect} from 'react-router-dom'\r\nconst useStyles = makeStyles((theme) => ({\r\n  \r\n  menu:{\r\n    // backgroundColor:theme.palette.background.paper,\r\n    color:\"#ffffff\",\r\n    textDecoration:\"none\"\r\n  }\r\n}));\r\n\r\n\r\nexport default function SuccessPage(){\r\n\tconst auth =React.useContext(AuthContext)\r\n\tconst classes = useStyles();\r\n\t const logout=()=>{\r\n    auth.logout()\r\n    return <Redirect to=\"/login\"/>\r\n  }\r\n\treturn(\r\n\t\t\t<React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\">\r\n        <div style={{ textAlign:\"center\" }}>\r\n        \t<h1>Your Channel has been Created Successfully!</h1>\r\n        \t<h4>you need to logout and login again to experience full creator mode</h4>\r\n        \t<Button variant=\"contained\" onClick={logout} color=\"primary\"><Link className={classes.menu} to=\"/login\" >Logout</Link></Button>\r\n        </div>\r\n      </Container>\r\n    </React.Fragment>\r\n\t\t)\r\n}",{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":14,"column":8,"nodeType":"193","messageId":"194","endLine":14,"endColumn":23},{"ruleId":"191","severity":1,"message":"195","line":12,"column":28,"nodeType":"193","messageId":"194","endLine":12,"endColumn":36},{"ruleId":"196","severity":1,"message":"197","line":108,"column":5,"nodeType":"198","messageId":"199","endLine":131,"endColumn":6},{"ruleId":"191","severity":1,"message":"200","line":8,"column":9,"nodeType":"193","messageId":"194","endLine":8,"endColumn":17},{"ruleId":"191","severity":1,"message":"201","line":8,"column":10,"nodeType":"193","messageId":"194","endLine":8,"endColumn":18},{"ruleId":"191","severity":1,"message":"202","line":8,"column":20,"nodeType":"193","messageId":"194","endLine":8,"endColumn":36},{"ruleId":"191","severity":1,"message":"203","line":63,"column":9,"nodeType":"193","messageId":"194","endLine":63,"endColumn":21},{"ruleId":"191","severity":1,"message":"204","line":3,"column":16,"nodeType":"193","messageId":"194","endLine":3,"endColumn":27},{"ruleId":"191","severity":1,"message":"205","line":38,"column":20,"nodeType":"193","messageId":"194","endLine":38,"endColumn":23},{"ruleId":"206","severity":1,"message":"207","line":130,"column":27,"nodeType":"208","messageId":"209","endLine":130,"endColumn":29},{"ruleId":"206","severity":1,"message":"207","line":143,"column":34,"nodeType":"208","messageId":"209","endLine":143,"endColumn":36},{"ruleId":"191","severity":1,"message":"204","line":2,"column":14,"nodeType":"193","messageId":"194","endLine":2,"endColumn":25},{"ruleId":"191","severity":1,"message":"210","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":12},{"ruleId":"191","severity":1,"message":"211","line":40,"column":7,"nodeType":"193","messageId":"194","endLine":40,"endColumn":18},{"ruleId":"191","severity":1,"message":"212","line":22,"column":29,"nodeType":"193","messageId":"194","endLine":22,"endColumn":33},{"ruleId":"191","severity":1,"message":"213","line":8,"column":31,"nodeType":"193","messageId":"194","endLine":8,"endColumn":34},{"ruleId":"214","severity":1,"message":"215","line":68,"column":3,"nodeType":"216","messageId":"217","endLine":68,"endColumn":13},{"ruleId":"191","severity":1,"message":"218","line":9,"column":10,"nodeType":"193","messageId":"194","endLine":9,"endColumn":14},{"ruleId":"191","severity":1,"message":"219","line":9,"column":16,"nodeType":"193","messageId":"194","endLine":9,"endColumn":26},{"ruleId":"191","severity":1,"message":"220","line":9,"column":39,"nodeType":"193","messageId":"194","endLine":9,"endColumn":53},{"ruleId":"191","severity":1,"message":"221","line":10,"column":10,"nodeType":"193","messageId":"194","endLine":10,"endColumn":34},{"ruleId":"206","severity":1,"message":"207","line":87,"column":27,"nodeType":"208","messageId":"209","endLine":87,"endColumn":29},{"ruleId":"214","severity":1,"message":"222","line":21,"column":5,"nodeType":"216","messageId":"217","endLine":21,"endColumn":10},{"ruleId":"206","severity":1,"message":"207","line":85,"column":32,"nodeType":"208","messageId":"209","endLine":85,"endColumn":34},{"ruleId":"191","severity":1,"message":"204","line":2,"column":14,"nodeType":"193","messageId":"194","endLine":2,"endColumn":25},{"ruleId":"191","severity":1,"message":"223","line":3,"column":9,"nodeType":"193","messageId":"194","endLine":3,"endColumn":19},{"ruleId":"191","severity":1,"message":"224","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":24},{"ruleId":"191","severity":1,"message":"225","line":4,"column":26,"nodeType":"193","messageId":"194","endLine":4,"endColumn":30},{"ruleId":"191","severity":1,"message":"226","line":4,"column":44,"nodeType":"193","messageId":"194","endLine":4,"endColumn":49},{"ruleId":"191","severity":1,"message":"227","line":4,"column":51,"nodeType":"193","messageId":"194","endLine":4,"endColumn":64},{"ruleId":"191","severity":1,"message":"210","line":5,"column":8,"nodeType":"193","messageId":"194","endLine":5,"endColumn":12},{"ruleId":"191","severity":1,"message":"204","line":2,"column":14,"nodeType":"193","messageId":"194","endLine":2,"endColumn":25},{"ruleId":"191","severity":1,"message":"223","line":3,"column":9,"nodeType":"193","messageId":"194","endLine":3,"endColumn":19},{"ruleId":"191","severity":1,"message":"224","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":24},{"ruleId":"191","severity":1,"message":"225","line":4,"column":26,"nodeType":"193","messageId":"194","endLine":4,"endColumn":30},{"ruleId":"191","severity":1,"message":"227","line":4,"column":51,"nodeType":"193","messageId":"194","endLine":4,"endColumn":64},{"ruleId":"191","severity":1,"message":"210","line":5,"column":8,"nodeType":"193","messageId":"194","endLine":5,"endColumn":12},{"ruleId":"191","severity":1,"message":"210","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":12},{"ruleId":"191","severity":1,"message":"205","line":51,"column":18,"nodeType":"193","messageId":"194","endLine":51,"endColumn":21},{"ruleId":"228","severity":1,"message":"229","line":66,"column":5,"nodeType":"230","endLine":66,"endColumn":105},{"ruleId":"191","severity":1,"message":"231","line":3,"column":8,"nodeType":"193","messageId":"194","endLine":3,"endColumn":18},"no-native-reassign",["232"],"no-negated-in-lhs",["233"],"no-unused-vars","'PageNotFound404' is defined but never used.","Identifier","unusedVar","'useQuery' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Redirect' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'handleChange' is assigned a value but never used.","'useMutation' is defined but never used.","'err' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'logo' is defined but never used.","'GET_EPISODE' is assigned a value but never used.","'data' is assigned a value but never used.","'Mic' is defined but never used.","no-dupe-keys","Duplicate key 'donebutton'.","ObjectExpression","unexpected","'Icon' is defined but never used.","'IconButton' is defined but never used.","'LinearProgress' is defined but never used.","'PlayCircleFilledOutlined' is defined but never used.","Duplicate key 'width'.","'useContext' is defined but never used.","'createMuiTheme' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'ThemeProvider' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation"]