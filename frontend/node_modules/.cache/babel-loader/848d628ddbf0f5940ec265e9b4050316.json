{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\test.js\";\nimport Recorder from 'recorder-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const recorder = new Recorder(audioContext, {// An array of 255 Numbers\n    // You can use this to visualize the audio stream\n    // If you use react, check out react-wave-stream\n    // onAnalysed: data => console.log(data),\n  });\n  let isRecording = false;\n  let blob = null;\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => recorder.init(stream)).catch(err => console.log('Uh oh... unable to get stream...', err));\n\n  const startRecording = () => {\n    recorder.start().then(() => isRecording = true);\n    console.log(\"start\");\n  };\n\n  const stopRecording = () => {\n    recorder.stop().then(({\n      blob,\n      buffer\n    }) => {\n      blob = blob;\n      console.log(blob); // buffer is an AudioBuffer\n    });\n  };\n\n  const download = () => {\n    Recorder.download(blob, 'my-audio-file'); // downloads a .wav file\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: download,\n      children: \"download\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n}\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/test.js"],"names":["Recorder","Test","audioContext","window","AudioContext","webkitAudioContext","recorder","isRecording","blob","navigator","mediaDevices","getUserMedia","audio","then","stream","init","catch","err","console","log","startRecording","start","stopRecording","stop","buffer","download"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,aAArB;;AAGA,eAAe,SAASC,IAAT,GAAe;AAC1B,QAAMC,YAAY,GAAI,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAtB;AACA,QAAMC,QAAQ,GAAG,IAAIN,QAAJ,CAAaE,YAAb,EAA2B,CACxC;AACA;AACA;AACA;AAJwC,GAA3B,CAAjB;AAOE,MAAIK,WAAW,GAAG,KAAlB;AACA,MAAIC,IAAI,GAAG,IAAX;AAEAC,EAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAACC,IAAAA,KAAK,EAAE;AAAR,GAApC,EACHC,IADG,CACEC,MAAM,IAAIR,QAAQ,CAACS,IAAT,CAAcD,MAAd,CADZ,EAEHE,KAFG,CAEGC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDF,GAAhD,CAFV;;AAKJ,QAAMG,cAAc,GAAC,MAAI;AACvBd,IAAAA,QAAQ,CAACe,KAAT,GACGR,IADH,CACQ,MAAMN,WAAW,GAAG,IAD5B;AAEEW,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAJD;;AAMA,QAAMG,aAAa,GAAC,MAAI;AACtBhB,IAAAA,QAAQ,CAACiB,IAAT,GACGV,IADH,CACQ,CAAC;AAACL,MAAAA,IAAD;AAAOgB,MAAAA;AAAP,KAAD,KAAoB;AACxBhB,MAAAA,IAAI,GAAGA,IAAP;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EAFwB,CAGxB;AACD,KALH;AAMD,GAPD;;AAQA,QAAMiB,QAAQ,GAAC,MAAI;AACjBzB,IAAAA,QAAQ,CAACyB,QAAT,CAAkBjB,IAAlB,EAAwB,eAAxB,EADiB,CACyB;AAC3C,GAFD;;AAKA,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEY,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAEG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQD;KA5CuBxB,I","sourcesContent":["import Recorder from 'recorder-js';\r\n\r\n\r\nexport default function Test(){\r\n    const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n    const recorder = new Recorder(audioContext, {\r\n        // An array of 255 Numbers\r\n        // You can use this to visualize the audio stream\r\n        // If you use react, check out react-wave-stream\r\n        // onAnalysed: data => console.log(data),\r\n      });\r\n\r\n      let isRecording = false;\r\n      let blob = null;\r\n\r\n      navigator.mediaDevices.getUserMedia({audio: true})\r\n  .then(stream => recorder.init(stream))\r\n  .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n\r\n\r\n  const startRecording=()=>{\r\n    recorder.start()\r\n      .then(() => isRecording = true);\r\n      console.log(\"start\")\r\n  }\r\n\r\n  const stopRecording=()=>{\r\n    recorder.stop()\r\n      .then(({blob, buffer}) => {\r\n        blob = blob;\r\n        console.log(blob)\r\n        // buffer is an AudioBuffer\r\n      });\r\n  }\r\n  const download=()=>{\r\n    Recorder.download(blob, 'my-audio-file'); // downloads a .wav file\r\n  }\r\n\r\n\r\n  return(\r\n      <div>\r\n          <button onClick={startRecording}>start</button>\r\n          <button onClick={stopRecording}>stop</button>\r\n          <button onClick={download}>download</button>\r\n\r\n      </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}