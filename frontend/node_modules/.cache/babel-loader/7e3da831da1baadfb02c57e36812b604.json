{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, Container, Grid, Icon, IconButton, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect, useParams } from 'react-router';\nimport AuthContext from '../context/auth-context';\nimport { Link } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\nimport Recorder from 'recorder-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar toWav = require('audiobuffer-to-wav');\n\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    textDecoration: 'none'\n  },\n  container: {\n    padding: 10\n  },\n  control: {\n    display: \"flex\"\n  },\n  icon: {\n    // flex:1,\n    textAlign: \"center\",\n    color: \"#000000\"\n  },\n  iconmic: {\n    // flex:1,\n    textAlign: \"center\",\n    color: \"red\"\n  },\n  gif: {\n    flex: 1,\n    justifyItems: \"contain\"\n  }\n}));\nexport default function Reactmic(props) {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const recorder = new Recorder(audioContext, {// An array of 255 Numbers\n    // You can use this to visualize the audio stream\n    // If you use react, check out react-wave-stream\n    // onAnalysed: data => console.log(data),\n  });\n  const classes = useStyles();\n  const [state, setState] = useState({\n    recording: false,\n    file: null\n  });\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n  const {\n    room\n  } = useParams();\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => recorder.init(stream)).catch(err => console.log('Uh oh... unable to get stream...', err));\n\n  const onStart = () => {\n    recorder.start().then(() => setState({\n      recording: true\n    }));\n    console.log(\"start\");\n  };\n\n  const onStop = () => {\n    recorder.stop().then(({\n      blob,\n      buffer\n    }) => {\n      setState({\n        recording: false,\n        file: blob\n      });\n    });\n    let file = state.file;\n    let speaker = auth.userId;\n    let roomid = room;\n    if (file === null) console.log(state.recording);else uploadFile({\n      variables: {\n        file: file,\n        roomid: roomid,\n        speaker: speaker\n      }\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    // {/* <button onClick={startRecording} type=\"button\">Start</button>\n    // <button onClick={stopRecording} type=\"button\">Stop</button> */}\n    // <div className={classes.buttonroot}>\n    // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\n    // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\n    // <Button className={classes.donebutton} >\n    // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\n    // </Button>\n    // </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: state.recording ? classes.icon : classes.iconmic,\n          onClick: state.recording ? onStart : onStop,\n          children: /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.icon,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: classes.donebutton,\n            to: `roomID=${room}/editpodcast`,\n            children: /*#__PURE__*/_jsxDEV(Done, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Reactmic, \"BhC+zBgQ3747KE3S90ojGIB/rU4=\", false, function () {\n  return [useStyles, useMutation, useParams];\n});\n\n_c = Reactmic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reactmic\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useContext","useEffect","useState","AudioProcess","gql","useMutation","Button","Container","Grid","Icon","IconButton","ThemeProvider","makeStyles","Redirect","useParams","AuthContext","Link","saveAs","Done","Mic","PlayArrow","Stop","Recorder","toWav","require","UPLOAD_FILE","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","textDecoration","container","padding","control","icon","textAlign","iconmic","gif","justifyItems","Reactmic","props","auth","audioContext","window","AudioContext","webkitAudioContext","recorder","classes","state","setState","recording","file","uploadFile","onCompleted","data","console","log","room","navigator","mediaDevices","getUserMedia","audio","then","stream","init","catch","err","onStart","start","onStop","stop","blob","buffer","speaker","userId","roomid","variables"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useContext, useEffect, useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, Container, Grid, Icon, IconButton, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport AuthContext from '../context/auth-context'\r\nimport { Link } from 'react-router-dom';\r\nimport {saveAs} from 'file-saver'\r\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\r\nimport Recorder from 'recorder-js';\r\n\r\nvar toWav = require('audiobuffer-to-wav')\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n   \r\n    textDecoration:'none'\r\n  },\r\n  \r\n  container:{\r\n    padding:10\r\n  },\r\n  control:{\r\n    display:\"flex\"\r\n  },\r\n  icon:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"#000000\"\r\n  },\r\n  iconmic:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"red\"\r\n  },\r\n  gif:{\r\n    flex:1,\r\n    justifyItems:\"contain\"\r\n  }\r\n\r\n}))\r\n\r\n\r\nexport default function Reactmic(props){\r\n\r\n\r\n  const auth = useContext(AuthContext)\r\n  const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n  const recorder = new Recorder(audioContext, {\r\n      // An array of 255 Numbers\r\n      // You can use this to visualize the audio stream\r\n      // If you use react, check out react-wave-stream\r\n      // onAnalysed: data => console.log(data),\r\n    });\r\n\r\n  \r\n\r\n  const classes = useStyles();\r\n  \r\n    const [state,setState] = useState({\r\n        recording:false,\r\n        file:null\r\n    })\r\n\r\n    const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n \r\n  \r\n  \r\n  const { room } = useParams()\r\n\r\n  navigator.mediaDevices.getUserMedia({audio: true})\r\n  .then(stream => recorder.init(stream))\r\n  .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n  \r\n  const onStart=()=>{\r\n   \r\n    recorder.start()\r\n    .then(() => setState({recording:true}));\r\n    console.log(\"start\")\r\n  }\r\n  const onStop=()=> {\r\n    \r\n    recorder.stop()\r\n    .then(({blob, buffer}) => {\r\n      setState({recording:false,file:blob});\r\n    });\r\n    let file=state.file\r\n    let speaker=auth.userId\r\n    let roomid=room\r\n    if(file ===null) console.log(state.recording)\r\n    else uploadFile({variables:{file:file,roomid:roomid,speaker:speaker}})\r\n  \r\n  }\r\n \r\n\r\n    return (\r\n      \r\n        \r\n        // <div>\r\n       \r\n        // {/* <button onClick={startRecording} type=\"button\">Start</button>\r\n        // <button onClick={stopRecording} type=\"button\">Stop</button> */}\r\n        // <div className={classes.buttonroot}>\r\n        // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\r\n        // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\r\n        // <Button className={classes.donebutton} >\r\n        // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\r\n        // </Button>\r\n        // </div>\r\n        // </div>\r\n\r\n        <div className={classes.container}>\r\n          <div className={classes.control}>\r\n          <div className={classes.gif}>\r\n          {/* <ReactMic\r\n          width=\"250\"\r\n          height=\"50\"\r\n          visualSetting=\"frequencyBars\"\r\n          record={state.recording}\r\n          onStop={onStop}\r\n          strokeColor=\"#ffffff\"\r\n          backgroundColor=\"#1976d2\"\r\n          bitRate={256000}     \r\n          sampleRate={96000}\r\n          timeSlice={3000} \r\n          minetype=\"audio/wav\"\r\n          /> */}\r\n          </div>\r\n           \r\n            <Button \r\n            className={ state.recording ? classes.icon:classes.iconmic\r\n            } \r\n            onClick={state.recording ? onStart:onStop}>\r\n             \r\n                <Mic/>\r\n             \r\n            </Button>\r\n            <Button className={classes.icon}>\r\n              <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\r\n             \r\n                <Done/>\r\n              \r\n              </Link>\r\n            </Button>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n\r\n      \r\n    )\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}