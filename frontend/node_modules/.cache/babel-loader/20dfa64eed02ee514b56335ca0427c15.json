{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    flex: 1,\n    color: \"green\"\n  },\n  soundwav: {}\n}));\nexport default function Reactmic() {\n  _s();\n\n  const classes = useStyles();\n  const [state, setState] = useState({\n    record: false\n  });\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n\n  const blobToFile = theBlob => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = new Date().toISOString();\n    return theBlob;\n  };\n\n  const startRecording = () => {\n    setState({\n      record: true\n    });\n  };\n\n  const stopRecording = () => {\n    setState({\n      record: false\n    });\n  };\n\n  const audioProcess = file => {\n    let room = \"aee04343-1c85-41cb-b375-2493a8efa2b0\";\n    let speaker = \"606b367f6a34b008e829d1f4\";\n    if (!file) return;\n    uploadFile({\n      variables: {\n        file,\n        roomid: room,\n        speaker: speaker\n      }\n    });\n  };\n\n  const onStop = recordedBlob => {\n    let file = blobToFile(recordedBlob.blob);\n    audioProcess(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactMic, {\n      width: \"290\",\n      record: state.record,\n      className: classes.soundwav,\n      onStop: onStop,\n      strokeColor: \"#ffffff\",\n      backgroundColor: \"#90caf9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonroot,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: classes.startbutton,\n        onClick: startRecording,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.stopbutton,\n        onClick: stopRecording,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.donebutton,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Reactmic, \"Nn+YBVKVZqSu+xZJzcFRtn/F2TQ=\", false, function () {\n  return [useStyles, useMutation];\n});\n\n_c = Reactmic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reactmic\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useState","AudioProcess","gql","useMutation","Button","ThemeProvider","makeStyles","UPLOAD_FILE","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","soundwav","Reactmic","classes","state","setState","record","uploadFile","onCompleted","data","console","log","blobToFile","theBlob","lastModifiedDate","Date","name","toISOString","startRecording","stopRecording","audioProcess","file","room","speaker","variables","roomid","onStop","recordedBlob","blob"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n    flex:1,\r\n    color:\"green\"\r\n  },\r\n  soundwav:{\r\n    \r\n  }\r\n}))\r\n\r\n\r\nexport default function Reactmic(){\r\n\r\n  const classes = useStyles();\r\n  \r\n    const [state,setState] = useState({\r\n        record:false,\r\n      \r\n    })\r\n\r\n    const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n \r\n  const blobToFile=(theBlob)=>{\r\n    \r\n    theBlob.lastModifiedDate = new Date();\r\n    theBlob.name = new Date().toISOString();\r\n    return theBlob;\r\n}\r\n\r\n  const startRecording = () => {\r\n    setState({ record: true });\r\n  }\r\n \r\n  const stopRecording = () => {\r\n    setState({ record: false });\r\n  }\r\n \r\n\r\n  const audioProcess=(file)=>{\r\n    let room=\"aee04343-1c85-41cb-b375-2493a8efa2b0\"\r\n    let speaker = \"606b367f6a34b008e829d1f4\"\r\n    \r\n    if(!file) return\r\n    uploadFile({ variables: { file,roomid:room,speaker:speaker } })\r\n\r\n  }\r\n \r\n  const onStop=(recordedBlob)=> {\r\n    \r\n    let file = blobToFile(recordedBlob.blob)\r\n   \r\n    \r\n    audioProcess(file)\r\n  \r\n  }\r\n \r\n  \r\n    return (\r\n      \r\n        \r\n        <div>\r\n        <ReactMic\r\n          width=\"290\"\r\n          record={state.record}\r\n          className={classes.soundwav}\r\n          onStop={onStop}\r\n          strokeColor=\"#ffffff\"\r\n          backgroundColor=\"#90caf9\"\r\n          />\r\n        {/* <button onClick={startRecording} type=\"button\">Start</button>\r\n        <button onClick={stopRecording} type=\"button\">Stop</button> */}\r\n        <div className={classes.buttonroot}>\r\n        <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\r\n        <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\r\n        <Button className={classes.donebutton} >Done</Button>\r\n        </div>\r\n        </div>\r\n      \r\n    )\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}