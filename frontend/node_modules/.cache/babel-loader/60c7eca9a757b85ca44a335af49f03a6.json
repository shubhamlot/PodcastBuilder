{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, Container, Grid, Icon, IconButton, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect, useParams } from 'react-router';\nimport AuthContext from '../context/auth-context';\nimport { Link } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\nimport Recorder from 'recorder-js'; // var toWav = require('audiobuffer-to-wav')\n// const UPLOAD_FILE = gql`\n//   mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n//       UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n//   }\n// `\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    textDecoration: 'none'\n  },\n  container: {\n    padding: 10\n  },\n  control: {\n    display: \"flex\"\n  },\n  icon: {\n    // flex:1,\n    textAlign: \"center\",\n    color: \"#000000\"\n  },\n  iconmic: {\n    // flex:1,\n    textAlign: \"center\",\n    color: \"red\"\n  },\n  gif: {\n    flex: 1,\n    justifyItems: \"contain\"\n  }\n})); // export default function Reactmic(props){\n//   const auth = useContext(AuthContext)\n//   const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\n//   const recorder = new Recorder(audioContext, {\n//       // An array of 255 Numbers\n//       // You can use this to visualize the audio stream\n//       // If you use react, check out react-wave-stream\n//       // onAnalysed: data => console.log(data),\n//     });\n//   const classes = useStyles();\n//     const [state,setState] = useState({\n//         recording:false,\n//     })\n//     const [file,getFile] = useState(null)\n//     const[uploadFile] = useMutation(UPLOAD_FILE,{\n//         onCompleted: data => console.log(data),\n//       })\n//   const { room } = useParams()\n//   navigator.mediaDevices.getUserMedia({audio: true})\n//   .then(stream => recorder.init(stream))\n//   .catch(err => console.log('Uh oh... unable to get stream...', err));\n//   const onStart=()=>{\n//     recorder.start()\n//     .then(() => {setState({recording:true})\n//     console.log(\"start\")});\n//   }\n//   const onStop=()=> {\n//     if(state.recording){\n//     recorder.stop()\n//     .then(({blob, buffer}) => {\n//       setState({recording:false});\n//       console.log(blob)\n//       getFile(blob)\n//     });\n//  // if(file ===null || roomid === null || speaker === null) console.log(state.recording)\n//  let speaker=auth.userId\n//  if(!auth.userId) speaker=\"\"\n//    uploadFile({variables:{file:file,roomid:room,speaker:speaker}})\n//   }\n//   }\n//     return (\n//         // <div>\n//         // {/* <button onClick={startRecording} type=\"button\">Start</button>\n//         // <button onClick={stopRecording} type=\"button\">Stop</button> */}\n//         // <div className={classes.buttonroot}>\n//         // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\n//         // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\n//         // <Button className={classes.donebutton} >\n//         // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\n//         // </Button>\n//         // </div>\n//         // </div>\n//         <div className={classes.container}>\n//           <div className={classes.control}>\n//           <div className={classes.gif}>\n//           {/* <ReactMic\n//           width=\"250\"\n//           height=\"50\"\n//           visualSetting=\"frequencyBars\"\n//           record={state.recording}\n//           onStop={onStop}\n//           strokeColor=\"#ffffff\"\n//           backgroundColor=\"#1976d2\"\n//           bitRate={256000}     \n//           sampleRate={96000}\n//           timeSlice={3000} \n//           minetype=\"audio/wav\"\n//           /> */}\n//           </div>\n//             <Button \n//             className={ classes.icon\n//             } \n//             onClick={ onStart}>\n//                 <Mic/>\n//             </Button>\n//             <Button \n//             className={ classes.iconmic\n//             } \n//             onClick={onStop}>\n//                 <Mic/>\n//             </Button>\n//             <Button className={classes.icon}>\n//               <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\n//                 <Done/>\n//               </Link>\n//             </Button>\n//           </div>\n//         </div>\n//     )\n// }\n// import { useState } from 'react';\n// import Recorder from 'recorder-js';\n\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nexport default function Test() {\n  _s();\n\n  const classes = useStyles();\n  const auth = useContext(AuthContext);\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const recorder = new Recorder(audioContext, {// An array of 255 Numbers\n    // You can use this to visualize the audio stream\n    // If you use react, check out react-wave-stream\n    // onAnalysed: data => console.log(data),\n  });\n  const {\n    room\n  } = useParams();\n  const [recording, setRecording] = useState(false);\n  const [file, setFile] = useState(null);\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => recorder.init(stream)).catch(err => console.log('Uh oh... unable to get stream...', err));\n\n  const startRecording = () => {\n    recorder.start().then(() => setRecording(true));\n    console.log(\"start\");\n  };\n\n  const stopRecording = () => {\n    recorder.stop().then(({\n      blob,\n      buffer\n    }) => {\n      setFile(blob);\n      console.log(blob);\n    });\n\n    if (file != null) {\n      let speaker = auth.userId;\n      uploadFile({\n        variables: {\n          file: file,\n          roomid: room,\n          speaker: speaker\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.gif\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.icon,\n        onClick: startRecording,\n        children: \"Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.iconmic,\n        onClick: stopRecording,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.icon,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: classes.donebutton,\n          to: `roomID=${room}/editpodcast`,\n          children: /*#__PURE__*/_jsxDEV(Done, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"KTYbVst+cSf8Mo+E78Tw8o1ZoQ8=\", false, function () {\n  return [useStyles, useParams, useMutation];\n});\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useContext","useEffect","useState","AudioProcess","gql","useMutation","Button","Container","Grid","Icon","IconButton","ThemeProvider","makeStyles","Redirect","useParams","AuthContext","Link","saveAs","Done","Mic","PlayArrow","Stop","Recorder","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","textDecoration","container","padding","control","icon","textAlign","iconmic","gif","justifyItems","UPLOAD_FILE","Test","classes","auth","audioContext","window","AudioContext","webkitAudioContext","recorder","room","recording","setRecording","file","setFile","uploadFile","onCompleted","data","console","log","navigator","mediaDevices","getUserMedia","audio","then","stream","init","catch","err","startRecording","start","stopRecording","stop","blob","buffer","speaker","userId","variables","roomid"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useContext, useEffect, useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, Container, Grid, Icon, IconButton, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport AuthContext from '../context/auth-context'\r\nimport { Link } from 'react-router-dom';\r\nimport {saveAs} from 'file-saver'\r\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\r\nimport Recorder from 'recorder-js';\r\n\r\n// var toWav = require('audiobuffer-to-wav')\r\n// const UPLOAD_FILE = gql`\r\n//   mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n//       UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n//   }\r\n// `\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n   \r\n    textDecoration:'none'\r\n  },\r\n  \r\n  container:{\r\n    padding:10\r\n  },\r\n  control:{\r\n    display:\"flex\"\r\n  },\r\n  icon:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"#000000\"\r\n  },\r\n  iconmic:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"red\"\r\n  },\r\n  gif:{\r\n    flex:1,\r\n    justifyItems:\"contain\"\r\n  }\r\n\r\n}))\r\n\r\n\r\n// export default function Reactmic(props){\r\n\r\n\r\n//   const auth = useContext(AuthContext)\r\n//   const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n//   const recorder = new Recorder(audioContext, {\r\n//       // An array of 255 Numbers\r\n//       // You can use this to visualize the audio stream\r\n//       // If you use react, check out react-wave-stream\r\n//       // onAnalysed: data => console.log(data),\r\n//     });\r\n\r\n  \r\n\r\n//   const classes = useStyles();\r\n  \r\n//     const [state,setState] = useState({\r\n//         recording:false,\r\n        \r\n//     })\r\n\r\n//     const [file,getFile] = useState(null)\r\n\r\n//     const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n//         onCompleted: data => console.log(data),\r\n//       })\r\n \r\n  \r\n  \r\n//   const { room } = useParams()\r\n\r\n//   navigator.mediaDevices.getUserMedia({audio: true})\r\n//   .then(stream => recorder.init(stream))\r\n//   .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n  \r\n//   const onStart=()=>{\r\n   \r\n//     recorder.start()\r\n//     .then(() => {setState({recording:true})\r\n//     console.log(\"start\")});\r\n    \r\n//   }\r\n//   const onStop=()=> {\r\n\r\n//     if(state.recording){\r\n//     recorder.stop()\r\n//     .then(({blob, buffer}) => {\r\n//       setState({recording:false});\r\n//       console.log(blob)\r\n//       getFile(blob)\r\n      \r\n//     });\r\n//  // if(file ===null || roomid === null || speaker === null) console.log(state.recording)\r\n//  let speaker=auth.userId\r\n//  if(!auth.userId) speaker=\"\"\r\n//    uploadFile({variables:{file:file,roomid:room,speaker:speaker}})\r\n    \r\n//   }\r\n   \r\n  \r\n//   }\r\n \r\n\r\n//     return (\r\n      \r\n        \r\n//         // <div>\r\n       \r\n//         // {/* <button onClick={startRecording} type=\"button\">Start</button>\r\n//         // <button onClick={stopRecording} type=\"button\">Stop</button> */}\r\n//         // <div className={classes.buttonroot}>\r\n//         // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\r\n//         // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\r\n//         // <Button className={classes.donebutton} >\r\n//         // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\r\n//         // </Button>\r\n//         // </div>\r\n//         // </div>\r\n\r\n//         <div className={classes.container}>\r\n//           <div className={classes.control}>\r\n//           <div className={classes.gif}>\r\n//           {/* <ReactMic\r\n//           width=\"250\"\r\n//           height=\"50\"\r\n//           visualSetting=\"frequencyBars\"\r\n//           record={state.recording}\r\n//           onStop={onStop}\r\n//           strokeColor=\"#ffffff\"\r\n//           backgroundColor=\"#1976d2\"\r\n//           bitRate={256000}     \r\n//           sampleRate={96000}\r\n//           timeSlice={3000} \r\n//           minetype=\"audio/wav\"\r\n//           /> */}\r\n//           </div>\r\n           \r\n//             <Button \r\n//             className={ classes.icon\r\n//             } \r\n//             onClick={ onStart}>\r\n             \r\n//                 <Mic/>\r\n             \r\n//             </Button>\r\n//             <Button \r\n//             className={ classes.iconmic\r\n//             } \r\n//             onClick={onStop}>\r\n             \r\n//                 <Mic/>\r\n             \r\n//             </Button>\r\n//             <Button className={classes.icon}>\r\n//               <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\r\n             \r\n//                 <Done/>\r\n              \r\n//               </Link>\r\n//             </Button>\r\n            \r\n\r\n//           </div>\r\n//         </div>\r\n\r\n      \r\n//     )\r\n  \r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useState } from 'react';\r\n// import Recorder from 'recorder-js';\r\n\r\n\r\n\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\nexport default function Test(){\r\n    const classes = useStyles();\r\n    const auth = useContext(AuthContext)\r\n    const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n    const recorder = new Recorder(audioContext, {\r\n        // An array of 255 Numbers\r\n        // You can use this to visualize the audio stream\r\n        // If you use react, check out react-wave-stream\r\n        // onAnalysed: data => console.log(data),\r\n      });\r\n        const { room } = useParams()\r\n\r\n      \r\n      const [recording,setRecording] = useState(false)\r\n      const [file,setFile] = useState(null)\r\n\r\n          const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n\r\n  navigator.mediaDevices.getUserMedia({audio: true})\r\n  .then(stream => recorder.init(stream))\r\n  .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n\r\n\r\n  const startRecording=()=>{\r\n      \r\n    recorder.start()\r\n      .then(() => setRecording(true));\r\n      console.log(\"start\")\r\n  }\r\n\r\n  const stopRecording=()=>{\r\n    recorder.stop()\r\n      .then(({blob, buffer}) => {\r\n        \r\n        setFile(blob);\r\n        console.log(blob)\r\n        \r\n      });\r\n      if(file != null){\r\n        let speaker = auth.userId\r\n        uploadFile({variables:{file:file,roomid:room,speaker:speaker}})\r\n      }\r\n      \r\n  }\r\n \r\n\r\n\r\n  return(\r\n             \r\n\r\n        <div className={classes.container}>\r\n          <div className={classes.control}>\r\n          <div className={classes.gif}>\r\n         \r\n          </div>\r\n           \r\n            <Button \r\n            className={ classes.icon\r\n            } \r\n            onClick={ startRecording }>\r\n             \r\n                Record\r\n             \r\n            </Button>\r\n            <Button \r\n            className={ classes.iconmic\r\n            } \r\n            onClick={ stopRecording }>\r\n             \r\n                Stop\r\n             \r\n            </Button>\r\n            <Button className={classes.icon}>\r\n              <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\r\n             \r\n                <Done/>\r\n              \r\n              </Link>\r\n            </Button>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}