{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\Files.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SHOW_FILE = gql`\n  query{\n      files\n  }\n`;\nexport default function FS() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SHOW_FILE);\n  if (loading) return null;\n  let audio = [];\n  data.files.map(voice => {\n    audio.push( /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: voice,\n        type: \"mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)); //   images.push(<li> <img key={pic} src={`http://localhost:4000/${pic}`} alt={pic}/></li>)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), audio]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n}\n\n_s(FS, \"hLsNeCM6uPLZqykYOKQzV+Uk/qM=\", false, function () {\n  return [useQuery];\n});\n\n_c = FS;\n\nvar _c;\n\n$RefreshReg$(_c, \"FS\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/Files.js"],"names":["React","gql","useQuery","SHOW_FILE","FS","loading","error","data","audio","files","map","voice","push"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,GAAV,EAAeC,QAAf,QAA+B,gBAA/B;;AAGA,MAAMC,SAAS,GAAGF,GAAI;AACtB;AACA;AACA;AACA,CAJA;AAMA,eAAe,SAASG,EAAT,GAAa;AAAA;;AACxB,QAAK;AAAEC,IAAAA,OAAF;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,MAAwBL,QAAQ,CAACC,SAAD,CAArC;AAEA,MAAIE,OAAJ,EAAa,OAAO,IAAP;AAGb,MAAIG,KAAK,GAAG,EAAZ;AACAD,EAAAA,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAgBC,KAAD,IAAS;AAEpBH,IAAAA,KAAK,CAACI,IAAN,eACI;AAAO,MAAA,QAAQ,MAAf;AAAA,6BACI;AAAQ,QAAA,GAAG,EAAED,KAAb;AAAoB,QAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAFoB,CAQxB;AAEH,GAVG;AAcA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAGGH,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOH;;GA5BuBJ,E;UACSF,Q;;;KADTE,E","sourcesContent":["\r\nimport React from 'react'\r\nimport {  gql, useQuery } from '@apollo/client'\r\n\r\n\r\nconst SHOW_FILE = gql`\r\n  query{\r\n      files\r\n  }\r\n`\r\n\r\nexport default function FS(){\r\n    const{ loading,error,data} = useQuery(SHOW_FILE)\r\n\r\n    if (loading) return null\r\n\r\n    \r\n    let audio = []\r\n    data.files.map((voice)=>{\r\n\r\n        audio.push(\r\n            <audio controls>\r\n                <source src={voice} type=\"mp4\"/>\r\n            </audio>\r\n        )\r\n       \r\n    //   images.push(<li> <img key={pic} src={`http://localhost:4000/${pic}`} alt={pic}/></li>)\r\n    \r\n})\r\n\r\n   \r\n    \r\n    return(\r\n      <div >\r\n        <h1>click</h1>\r\n        \r\n        {audio}\r\n      </div>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}