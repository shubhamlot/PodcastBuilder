{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect, useParams } from 'react-router';\nimport AuthContext from '../context/auth-context';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    flex: 1,\n    color: \"green\",\n    textDecoration: 'none'\n  },\n  soundwav: {}\n}));\nexport default function Reactmic(props) {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n  const [state, setState] = useState({\n    record: false\n  });\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n\n  const blobToFile = theBlob => {\n    console.log(\"blob = \" + theBlob); // let file = new File([theBlob],'audio1.wav',{type:'audio/wav'})\n\n    let reader = new FileReader();\n    reader.readAsDataURL(theBlob);\n\n    reader.onloadend = () => {\n      let base64String = reader.result;\n      console.log(\"base64 = \" + base64String);\n    };\n\n    return file;\n  };\n\n  const startRecording = () => {\n    setState({\n      record: true\n    });\n  };\n\n  const stopRecording = () => {\n    setState({\n      record: false\n    });\n  };\n\n  const {\n    room\n  } = useParams();\n\n  const audioProcess = file => {\n    let speaker = auth.userId;\n    if (!file) return;\n    uploadFile({\n      variables: {\n        file,\n        roomid: room,\n        speaker: speaker\n      }\n    });\n  };\n\n  const onStop = recordedBlob => {\n    let recording = blobToFile(recordedBlob.blob); // audioProcess(formData)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactMic, {\n      width: \"290\",\n      record: state.record,\n      className: classes.soundwav,\n      onStop: onStop,\n      strokeColor: \"#ffffff\",\n      backgroundColor: \"#1976d2\",\n      bitRate: 256000,\n      sampleRate: 96000,\n      timeSlice: 3000,\n      minetype: \"audio/wav\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonroot,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: classes.startbutton,\n        onClick: startRecording,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.stopbutton,\n        onClick: stopRecording,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.donebutton,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: classes.donebutton,\n          to: `roomID=${room}/editpodcast`,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Reactmic, \"fa123Jb/xPRY6O5yeUm/IQfV/Qo=\", false, function () {\n  return [useStyles, useMutation, useParams];\n});\n\n_c = Reactmic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reactmic\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useContext","useEffect","useState","AudioProcess","gql","useMutation","Button","ThemeProvider","makeStyles","Redirect","useParams","AuthContext","Link","UPLOAD_FILE","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","textDecoration","soundwav","Reactmic","props","auth","classes","state","setState","record","uploadFile","onCompleted","data","console","log","blobToFile","theBlob","reader","FileReader","readAsDataURL","onloadend","base64String","result","file","startRecording","stopRecording","room","audioProcess","speaker","userId","variables","roomid","onStop","recordedBlob","recording","blob"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useContext, useEffect, useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport AuthContext from '../context/auth-context'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n    flex:1,\r\n    color:\"green\",\r\n    textDecoration:'none'\r\n  },\r\n  soundwav:{\r\n    \r\n  }\r\n}))\r\n\r\n\r\nexport default function Reactmic(props){\r\n\r\n\r\n  const auth = useContext(AuthContext)\r\n    \r\n  \r\n\r\n  const classes = useStyles();\r\n  \r\n    const [state,setState] = useState({\r\n        record:false,\r\n      \r\n    })\r\n\r\n    const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n \r\n  const blobToFile=(theBlob)=>{\r\n    console.log(\"blob = \"+theBlob)\r\n    // let file = new File([theBlob],'audio1.wav',{type:'audio/wav'})\r\n    let reader = new FileReader()\r\n    reader.readAsDataURL(theBlob)\r\n    reader.onloadend = ()=>{\r\n      let base64String = reader.result\r\n      console.log(\"base64 = \"+base64String)\r\n    }\r\n    return file;\r\n}\r\n\r\n  const startRecording = () => {\r\n    setState({ record: true });\r\n  }\r\n \r\n  const stopRecording = () => {\r\n    setState({ record: false });\r\n  }\r\n  const { room } = useParams()\r\n\r\n  const audioProcess=(file)=>{\r\n    \r\n    let speaker = auth.userId\r\n    \r\n    if(!file) return\r\n    uploadFile({ variables: { file,roomid:room,speaker:speaker } })\r\n    \r\n  }\r\n \r\n  const onStop=(recordedBlob)=> {\r\n    \r\n    let recording = blobToFile(recordedBlob.blob)\r\n    \r\n    \r\n    // audioProcess(formData)\r\n  \r\n  }\r\n \r\n\r\n    return (\r\n      \r\n        \r\n        <div>\r\n        <ReactMic\r\n          width=\"290\"\r\n          \r\n          record={state.record}\r\n          className={classes.soundwav}\r\n          onStop={onStop}\r\n          strokeColor=\"#ffffff\"\r\n          backgroundColor=\"#1976d2\"\r\n          bitRate={256000}     \r\n          sampleRate={96000}\r\n          timeSlice={3000} \r\n          minetype=\"audio/wav\"\r\n          />\r\n        {/* <button onClick={startRecording} type=\"button\">Start</button>\r\n        <button onClick={stopRecording} type=\"button\">Stop</button> */}\r\n        <div className={classes.buttonroot}>\r\n        <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\r\n        <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\r\n        <Button className={classes.donebutton} >\r\n        <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\r\n        </Button>\r\n        </div>\r\n        </div>\r\n      \r\n    )\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}