{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Gif.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  }\n});\nexport default function LinearBuffer() {\n  _s();\n\n  const classes = useStyles();\n  const [progress, setProgress] = React.useState(0);\n  const [buffer, setBuffer] = React.useState(10);\n  const progressRef = React.useRef(() => {});\n  React.useEffect(() => {\n    progressRef.current = () => {\n      if (progress > 100) {\n        setProgress(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setProgress(progress + diff);\n        setBuffer(progress + diff + diff2);\n      }\n    };\n  });\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      progressRef.current();\n    }, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n      variant: \"buffer\",\n      value: progress,\n      valueBuffer: buffer,\n      color: \"secondary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LinearBuffer, \"NISrg0s7U/VKwOQev7XIVReLads=\", false, function () {\n  return [useStyles];\n});\n\n_c = LinearBuffer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LinearBuffer\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Gif.js"],"names":["React","makeStyles","LinearProgress","useStyles","root","width","LinearBuffer","classes","progress","setProgress","useState","buffer","setBuffer","progressRef","useRef","useEffect","current","diff","Math","random","diff2","timer","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAC;AAC3BG,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH;AADqB,CAAD,CAA5B;AAMA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BT,KAAK,CAACU,QAAN,CAAe,CAAf,CAAhC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,KAAK,CAACU,QAAN,CAAe,EAAf,CAA5B;AAEA,QAAMG,WAAW,GAAGb,KAAK,CAACc,MAAN,CAAa,MAAM,CAAE,CAArB,CAApB;AACAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpBF,IAAAA,WAAW,CAACG,OAAZ,GAAsB,MAAM;AAC1B,UAAIR,QAAQ,GAAG,GAAf,EAAoB;AAClBC,QAAAA,WAAW,CAAC,CAAD,CAAX;AACAG,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD,OAHD,MAGO;AACL,cAAMK,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,cAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAA9B;AACAV,QAAAA,WAAW,CAACD,QAAQ,GAAGS,IAAZ,CAAX;AACAL,QAAAA,SAAS,CAACJ,QAAQ,GAAGS,IAAX,GAAkBG,KAAnB,CAAT;AACD;AACF,KAVD;AAWD,GAZD;AAcApB,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpB,UAAMM,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BT,MAAAA,WAAW,CAACG,OAAZ;AACD,KAFwB,EAEtB,GAFsB,CAAzB;AAIA,WAAO,MAAM;AACXO,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD,KAFD;AAGD,GARD,EAQG,EARH;AAUA,sBACE;AAAK,IAAA,SAAS,EAAEd,OAAO,CAACH,IAAxB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAC,QAAxB;AAAiC,MAAA,KAAK,EAAEI,QAAxC;AAAkD,MAAA,WAAW,EAAEG,MAA/D;AAAuE,MAAA,KAAK,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCuBL,Y;UACNH,S;;;KADMG,Y","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n});\r\n\r\nexport default function LinearBuffer() {\r\n  const classes = useStyles();\r\n  const [progress, setProgress] = React.useState(0);\r\n  const [buffer, setBuffer] = React.useState(10);\r\n\r\n  const progressRef = React.useRef(() => {});\r\n  React.useEffect(() => {\r\n    progressRef.current = () => {\r\n      if (progress > 100) {\r\n        setProgress(0);\r\n        setBuffer(10);\r\n      } else {\r\n        const diff = Math.random() * 10;\r\n        const diff2 = Math.random() * 10;\r\n        setProgress(progress + diff);\r\n        setBuffer(progress + diff + diff2);\r\n      }\r\n    };\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      progressRef.current();\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} color=\"secondary\" />\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}