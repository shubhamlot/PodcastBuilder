{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\userlogin.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport { userMutation, gql, useMutation } from '@apollo/client';\nimport { Redirect } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Userlogin() {\n  _s();\n\n  const UPLOAD_USER = gql`\n    mutation($username:String,$email:String,$password:String){\n        addUser(username:$username,email:$email,password:$password){\n          _id\n          username\n          email\n          isGuest\n        }\n      }\n`;\n  const [createUser] = useMutation(UPLOAD_USER, {\n    onCompleted: data => {\n      console.log();\n    }\n  });\n  let [state, setState] = useState({\n    username: '',\n    password: '',\n    email: '',\n    submitted: false\n  });\n\n  const handleUsername = e => {\n    console.log(state);\n    setState({\n      username: e.target.value,\n      password: state.password,\n      email: state.email\n    });\n  };\n\n  const handlePassword = e => {\n    console.log(state);\n    setState({\n      username: state.username,\n      password: e.target.value,\n      email: state.email\n    });\n  };\n\n  const handleEmail = e => {\n    console.log(state);\n    setState({\n      username: state.username,\n      password: state.password,\n      email: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createUser({\n      variables: {\n        username: state.username,\n        email: state.email,\n        password: state.password\n      }\n    });\n    setState({\n      submitted: true\n    });\n  };\n\n  if (!state.submitted) {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"guestname\",\n        name: \"username\",\n        value: state.username,\n        onChange: handleUsername\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        name: \"password\",\n        value: state.password,\n        onChange: handlePassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"email\",\n        name: \"email\",\n        value: state.email,\n        onChange: handleEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/initJoinRoom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(Userlogin, \"dCCtZ+0o64/jQT/pVDekxwujaZo=\", false, function () {\n  return [useMutation];\n});\n\n_c = Userlogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Userlogin\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/userlogin.js"],"names":["React","useState","userMutation","gql","useMutation","Redirect","Userlogin","UPLOAD_USER","createUser","onCompleted","data","console","log","state","setState","username","password","email","submitted","handleUsername","e","target","value","handlePassword","handleEmail","handleSubmit","preventDefault","variables"],"mappings":"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","sourcesContent":["import {React,useState} from 'react'\r\nimport { userMutation, gql, useMutation } from '@apollo/client'\r\nimport { Redirect } from 'react-router'\r\n\r\nexport default function Userlogin(){\r\n\r\n\r\n    const UPLOAD_USER = gql`\r\n    mutation($username:String,$email:String,$password:String){\r\n        addUser(username:$username,email:$email,password:$password){\r\n          _id\r\n          username\r\n          email\r\n          isGuest\r\n        }\r\n      }\r\n`\r\n\r\nconst[createUser] = useMutation(UPLOAD_USER,{\r\n    onCompleted: data => {\r\n        console.log()\r\n    }\r\n})\r\n\r\n\r\nlet [state, setState] = useState({\r\n    username:'',\r\n    password:'',\r\n    email:'',\r\n    submitted:false\r\n});\r\n\r\nconst handleUsername = (e)=>{\r\n    console.log(state)\r\n    setState({username:e.target.value,password:state.password,email:state.email})\r\n}\r\nconst handlePassword = (e)=>{\r\n    console.log(state)\r\n    setState({username:state.username,password:e.target.value,email:state.email})\r\n}\r\nconst handleEmail = (e)=>{\r\n    console.log(state)\r\n    setState({username:state.username,password:state.password,email:e.target.value})\r\n}\r\n\r\nconst handleSubmit = (e)=>{\r\n    e.preventDefault()\r\n    createUser({ variables: { username:state.username,\r\n        email:state.email,password:state.password } })\r\n        setState({submitted:true})\r\n    \r\n}\r\n\r\n    if(!state.submitted){\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"guestname\" name=\"username\" value={state.username}\r\n            onChange={handleUsername}/>\r\n            <input type=\"password\" placeholder=\"password\" name=\"password\" value={state.password}\r\n            onChange={handlePassword}/>\r\n            <input type=\"text\" placeholder=\"email\" name=\"email\" value={state.email}\r\n            onChange={handleEmail}/>\r\n            <input type=\"submit\"/>\r\n        </form>\r\n    )\r\n    }\r\n    else{\r\n        return <Redirect to='/initJoinRoom'/>\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}