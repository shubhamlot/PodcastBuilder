{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, Container, Grid, Icon, IconButton, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect, useParams } from 'react-router';\nimport AuthContext from '../context/auth-context';\nimport { Link } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { Done, KeyboardArrowLeft, KeyboardArrowRight, Mic, PlayArrow, Stop } from '@material-ui/icons';\nimport Recorder from 'recorder-js'; // var toWav = require('audiobuffer-to-wav')\n// const UPLOAD_FILE = gql`\n//   mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n//       UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n//   }\n// `\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    textDecoration: 'none'\n  },\n  container: {\n    padding: 10\n  },\n  control: {\n    display: \"flex\"\n  },\n  icon: {\n    // flex:1,\n    backgroundColor: \"#FFFFFF\",\n    textAlign: \"center\",\n    color: \"#000000\",\n    '&:hover': {\n      color: \"red\"\n    }\n  },\n  iconClick: {\n    color: \"red\",\n    backgroundColor: \"#424242\"\n  },\n  iconmic: {\n    // flex:1,\n    textAlign: \"center\",\n    color: \"red\"\n  },\n  gif: {\n    flex: 1,\n    justifyItems: \"contain\"\n  }\n}));\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nexport default function Test() {\n  _s();\n\n  const classes = useStyles();\n  const auth = useContext(AuthContext);\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  const recorder = new Recorder(audioContext, {// An array of 255 Numbers\n    // You can use this to visualize the audio stream\n    // If you use react, check out react-wave-stream\n    // onAnalysed: data => console.log(data),\n  });\n  const {\n    room\n  } = useParams();\n  const [recording, setRecording] = useState(false);\n  const [file, setFile] = useState(null);\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => recorder.init(stream)).catch(err => console.log('Uh oh... unable to get stream...', err));\n\n  const startRecording = () => {\n    recorder.start().then(() => setRecording(true));\n    console.log(\"start\");\n  };\n\n  const stopRecording = () => {\n    recorder.stop().then(({\n      blob,\n      buffer\n    }) => {\n      setRecording(false);\n      setFile(blob);\n    });\n\n    if (file != null) {\n      let speaker = auth.userId;\n      uploadFile({\n        variables: {\n          file: file,\n          roomid: room,\n          speaker: speaker\n        }\n      });\n    }\n  };\n\n  if (!recording) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.icon,\n          onClick: startRecording,\n          children: /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.iconmic,\n          onClick: stopRecording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.icon,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: classes.donebutton,\n            to: `roomID=${room}/editpodcast`,\n            children: /*#__PURE__*/_jsxDEV(KeyboardArrowRight, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.iconClick,\n          onClick: stopRecording,\n          children: [\">\", /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.iconmic,\n          onClick: stopRecording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.icon,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: classes.donebutton,\n            to: `roomID=${room}/editpodcast`,\n            children: /*#__PURE__*/_jsxDEV(KeyboardArrowRight, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(Test, \"KTYbVst+cSf8Mo+E78Tw8o1ZoQ8=\", false, function () {\n  return [useStyles, useParams, useMutation];\n});\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useContext","useEffect","useState","AudioProcess","gql","useMutation","Button","Container","Grid","Icon","IconButton","ThemeProvider","makeStyles","Redirect","useParams","AuthContext","Link","saveAs","Done","KeyboardArrowLeft","KeyboardArrowRight","Mic","PlayArrow","Stop","Recorder","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","textDecoration","container","padding","control","icon","backgroundColor","textAlign","iconClick","iconmic","gif","justifyItems","UPLOAD_FILE","Test","classes","auth","audioContext","window","AudioContext","webkitAudioContext","recorder","room","recording","setRecording","file","setFile","uploadFile","onCompleted","data","console","log","navigator","mediaDevices","getUserMedia","audio","then","stream","init","catch","err","startRecording","start","stopRecording","stop","blob","buffer","speaker","userId","variables","roomid"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useContext, useEffect, useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, Container, Grid, Icon, IconButton, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport AuthContext from '../context/auth-context'\r\nimport { Link } from 'react-router-dom';\r\nimport {saveAs} from 'file-saver'\r\nimport { Done, KeyboardArrowLeft, KeyboardArrowRight, Mic, PlayArrow, Stop } from '@material-ui/icons';\r\nimport Recorder from 'recorder-js';\r\n\r\n// var toWav = require('audiobuffer-to-wav')\r\n// const UPLOAD_FILE = gql`\r\n//   mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n//       UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n//   }\r\n// `\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n   \r\n    textDecoration:'none'\r\n  },\r\n  \r\n  container:{\r\n    padding:10\r\n  },\r\n  control:{\r\n    display:\"flex\"\r\n  },\r\n  icon:{\r\n    // flex:1,\r\n  \r\n    backgroundColor:\"#FFFFFF\",\r\n    textAlign:\"center\",\r\n    color:\"#000000\",\r\n    '&:hover':{\r\n      color:\"red\"\r\n    }\r\n  },\r\n\r\n  iconClick:{\r\n    color:\"red\",\r\n    backgroundColor:\"#424242\"\r\n  },\r\n  iconmic:{\r\n    // flex:1,\r\n    textAlign:\"center\",\r\n    color:\"red\"\r\n  },\r\n  gif:{\r\n    flex:1,\r\n    justifyItems:\"contain\"\r\n  }\r\n\r\n}))\r\n\r\n\r\n\r\n\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\nexport default function Test(){\r\n    const classes = useStyles();\r\n    const auth = useContext(AuthContext)\r\n    const audioContext =  new (window.AudioContext || window.webkitAudioContext)();\r\n    const recorder = new Recorder(audioContext, {\r\n        // An array of 255 Numbers\r\n        // You can use this to visualize the audio stream\r\n        // If you use react, check out react-wave-stream\r\n        // onAnalysed: data => console.log(data),\r\n      });\r\n        const { room } = useParams()\r\n\r\n      \r\n      const [recording,setRecording] = useState(false)\r\n      const [file,setFile] = useState(null)\r\n\r\n          const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n\r\n  navigator.mediaDevices.getUserMedia({audio: true})\r\n  .then(stream => recorder.init(stream))\r\n  .catch(err => console.log('Uh oh... unable to get stream...', err));\r\n\r\n\r\n  const startRecording=()=>{\r\n      \r\n    recorder.start()\r\n      .then(() => setRecording(true));\r\n      console.log(\"start\")\r\n  }\r\n\r\n  const stopRecording=()=>{\r\n    recorder.stop()\r\n      .then(({blob, buffer}) => {\r\n        setRecording(false)\r\n        setFile(blob);\r\n        \r\n      });\r\n      if(file != null){\r\n        let speaker = auth.userId\r\n        uploadFile({variables:{file:file,roomid:room,speaker:speaker}})\r\n      }\r\n      \r\n  }\r\n \r\n  \r\n\r\n  if(!recording){\r\n\r\n  return(\r\n             \r\n\r\n        <div className={classes.container}>\r\n          <div className={classes.control}>\r\n          <div className={classes.gif}>\r\n         \r\n          </div>\r\n           \r\n           \r\n            <IconButton\r\n            className={ classes.icon} \r\n            onClick={ startRecording }>\r\n            \r\n                <Mic/>\r\n             \r\n            </IconButton>\r\n            <Button \r\n            className={ classes.iconmic\r\n            } \r\n            onClick={ stopRecording }>\r\n             \r\n                \r\n             \r\n            </Button>\r\n            <Button className={classes.icon}>\r\n              <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\r\n             \r\n                <KeyboardArrowRight/>\r\n              \r\n              </Link>\r\n            </Button>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n  )\r\n          }\r\n\r\n          else{\r\n      return(                   \r\n\r\n        <div className={classes.container}>\r\n        <div className={classes.control}>\r\n        <div className={classes.gif}>\r\n       \r\n        </div>\r\n         \r\n         \r\n          <IconButton\r\n          className={ classes.iconClick} \r\n          onClick={ stopRecording }>>\r\n          \r\n              <Mic/>\r\n           \r\n          </IconButton>\r\n          <Button \r\n          className={ classes.iconmic\r\n          } \r\n          onClick={ stopRecording }>\r\n           \r\n              \r\n           \r\n          </Button>\r\n          <Button className={classes.icon}>\r\n            <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`}>\r\n           \r\n              <KeyboardArrowRight/>\r\n            \r\n            </Link>\r\n          </Button>\r\n          \r\n\r\n        </div>\r\n      </div>\r\n)\r\n          }\r\n}"]},"metadata":{},"sourceType":"module"}