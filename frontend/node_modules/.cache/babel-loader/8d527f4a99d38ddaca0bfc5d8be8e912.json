{"ast":null,"code":"var WaveStream = require('wav/lib/writer');\n\nvar AudioBufferStream = require('audio-buffer-stream');\n\nvar Buffer = require('buffer').Buffer;\n\nvar util = require('util');\n\nvar extend = require('xtend');\n\nmodule.exports = WaveRecorder;\nutil.inherits(WaveRecorder, WaveStream);\n\nfunction WaveRecorder(audioContext, opt) {\n  if (!(this instanceof WaveRecorder)) {\n    return new WaveRecorder(audioContext, opt);\n  }\n\n  var self = this;\n  opt = extend({\n    sampleRate: audioContext.sampleRate,\n    channels: 2,\n    bitDepth: 32,\n    chunkLength: 256,\n    bufferLength: 8192,\n    silenceDuration: null\n  }, opt);\n  WaveStream.call(this, {\n    sampleRate: audioContext.sampleRate,\n    bitDepth: opt.bitDepth,\n    channels: opt.channels,\n    format: opt.bitDepth === 32 ? 3 : 1\n  });\n  var audioStream = AudioBufferStream(opt);\n  audioStream.pipe(self);\n  audioStream.on('chunk', self.emit.bind(self, 'chunk'));\n  this.input = audioContext.createScriptProcessor(opt.bufferLength, opt.channels, 1);\n\n  this.input.onaudioprocess = function (e) {\n    audioStream.write(e.inputBuffer);\n  };\n\n  this.on('end', function () {\n    self.input.onaudioprocess = null;\n    self.input = null;\n  }); // required to make data flow, will be 0\n\n  this.input.connect(audioContext.destination);\n}","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/node_modules/wave-recorder/index.js"],"names":["WaveStream","require","AudioBufferStream","Buffer","util","extend","module","exports","WaveRecorder","inherits","audioContext","opt","self","sampleRate","channels","bitDepth","chunkLength","bufferLength","silenceDuration","call","format","audioStream","pipe","on","emit","bind","input","createScriptProcessor","onaudioprocess","e","write","inputBuffer","connect","destination"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBE,MAA/B;;AACA,IAAIC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,OAAD,CAApB;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAJ,IAAI,CAACK,QAAL,CAAcD,YAAd,EAA4BR,UAA5B;;AAEA,SAASQ,YAAT,CAAsBE,YAAtB,EAAoCC,GAApC,EAAyC;AACvC,MAAI,EAAE,gBAAgBH,YAAlB,CAAJ,EAAoC;AAClC,WAAO,IAAIA,YAAJ,CAAiBE,YAAjB,EAA+BC,GAA/B,CAAP;AACD;;AAED,MAAIC,IAAI,GAAG,IAAX;AACAD,EAAAA,GAAG,GAAGN,MAAM,CAAC;AACXQ,IAAAA,UAAU,EAAEH,YAAY,CAACG,UADd;AAEXC,IAAAA,QAAQ,EAAE,CAFC;AAGXC,IAAAA,QAAQ,EAAE,EAHC;AAIXC,IAAAA,WAAW,EAAE,GAJF;AAKXC,IAAAA,YAAY,EAAE,IALH;AAMXC,IAAAA,eAAe,EAAE;AANN,GAAD,EAOTP,GAPS,CAAZ;AASAX,EAAAA,UAAU,CAACmB,IAAX,CAAgB,IAAhB,EAAsB;AACpBN,IAAAA,UAAU,EAAEH,YAAY,CAACG,UADL;AAEpBE,IAAAA,QAAQ,EAAEJ,GAAG,CAACI,QAFM;AAGpBD,IAAAA,QAAQ,EAAEH,GAAG,CAACG,QAHM;AAIpBM,IAAAA,MAAM,EAAET,GAAG,CAACI,QAAJ,KAAiB,EAAjB,GAAsB,CAAtB,GAA0B;AAJd,GAAtB;AAOA,MAAIM,WAAW,GAAGnB,iBAAiB,CAACS,GAAD,CAAnC;AACAU,EAAAA,WAAW,CAACC,IAAZ,CAAiBV,IAAjB;AACAS,EAAAA,WAAW,CAACE,EAAZ,CAAe,OAAf,EAAwBX,IAAI,CAACY,IAAL,CAAUC,IAAV,CAAeb,IAAf,EAAqB,OAArB,CAAxB;AAEA,OAAKc,KAAL,GAAahB,YAAY,CAACiB,qBAAb,CAAmChB,GAAG,CAACM,YAAvC,EAAqDN,GAAG,CAACG,QAAzD,EAAmE,CAAnE,CAAb;;AACA,OAAKY,KAAL,CAAWE,cAAX,GAA4B,UAAUC,CAAV,EAAa;AACvCR,IAAAA,WAAW,CAACS,KAAZ,CAAkBD,CAAC,CAACE,WAApB;AACD,GAFD;;AAIA,OAAKR,EAAL,CAAQ,KAAR,EAAe,YAAU;AACvBX,IAAAA,IAAI,CAACc,KAAL,CAAWE,cAAX,GAA4B,IAA5B;AACAhB,IAAAA,IAAI,CAACc,KAAL,GAAa,IAAb;AACD,GAHD,EA/BuC,CAoCvC;;AACA,OAAKA,KAAL,CAAWM,OAAX,CAAmBtB,YAAY,CAACuB,WAAhC;AACD","sourcesContent":["var WaveStream = require('wav/lib/writer')\nvar AudioBufferStream = require('audio-buffer-stream')\nvar Buffer = require('buffer').Buffer\nvar util = require('util')\nvar extend = require('xtend')\n\nmodule.exports = WaveRecorder\nutil.inherits(WaveRecorder, WaveStream);\n\nfunction WaveRecorder(audioContext, opt) {\n  if (!(this instanceof WaveRecorder)){\n    return new WaveRecorder(audioContext, opt)\n  }\n\n  var self = this\n  opt = extend({\n    sampleRate: audioContext.sampleRate,\n    channels: 2,\n    bitDepth: 32,\n    chunkLength: 256,\n    bufferLength: 8192,\n    silenceDuration: null\n  }, opt)\n\n  WaveStream.call(this, {\n    sampleRate: audioContext.sampleRate,\n    bitDepth: opt.bitDepth,\n    channels: opt.channels,\n    format: opt.bitDepth === 32 ? 3 : 1\n  })\n\n  var audioStream = AudioBufferStream(opt)\n  audioStream.pipe(self)\n  audioStream.on('chunk', self.emit.bind(self, 'chunk'))\n\n  this.input = audioContext.createScriptProcessor(opt.bufferLength, opt.channels, 1)\n  this.input.onaudioprocess = function (e) {\n    audioStream.write(e.inputBuffer)\n  }\n\n  this.on('end', function(){\n    self.input.onaudioprocess = null\n    self.input = null\n  })\n\n  // required to make data flow, will be 0\n  this.input.connect(audioContext.destination)\n}\n"]},"metadata":{},"sourceType":"script"}