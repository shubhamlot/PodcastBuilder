{"ast":null,"code":"'use strict';\n\nvar _extends = require('@babel/runtime/helpers/extends');\n\nvar _require = require('@apollo/client/core'),\n    ApolloLink = _require.ApolloLink,\n    Observable = _require.Observable;\n\nvar _require2 = require('@apollo/client/link/http'),\n    createSignalIfSupported = _require2.createSignalIfSupported,\n    fallbackHttpConfig = _require2.fallbackHttpConfig,\n    parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse,\n    rewriteURIForGET = _require2.rewriteURIForGET,\n    selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n    selectURI = _require2.selectURI,\n    serializeFetchParameter = _require2.serializeFetchParameter;\n\nvar extractFiles = require('extract-files/public/extractFiles');\n\nvar formDataAppendFile = require('./formDataAppendFile');\n\nvar isExtractableFile = require('./isExtractableFile');\n\nmodule.exports = function createUploadLink(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$uri = _ref.uri,\n      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n      useGETForQueries = _ref.useGETForQueries,\n      _ref$isExtractableFil = _ref.isExtractableFile,\n      customIsExtractableFile = _ref$isExtractableFil === void 0 ? isExtractableFile : _ref$isExtractableFil,\n      CustomFormData = _ref.FormData,\n      _ref$formDataAppendFi = _ref.formDataAppendFile,\n      customFormDataAppendFile = _ref$formDataAppendFi === void 0 ? formDataAppendFile : _ref$formDataAppendFi,\n      customFetch = _ref.fetch,\n      fetchOptions = _ref.fetchOptions,\n      credentials = _ref.credentials,\n      headers = _ref.headers,\n      includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  };\n  return new ApolloLink(function (operation) {\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren = _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n        version = _context$clientAwaren.version,\n        headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: _extends({}, name && {\n        'apollographql-client-name': name\n      }, version && {\n        'apollographql-client-version': version\n      }, headers)\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _selectHttpOptionsAnd.options,\n        body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body, '', customIsExtractableFile),\n        clone = _extractFiles.clone,\n        files = _extractFiles.files;\n\n    var uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var RuntimeFormData = CustomFormData || FormData;\n      var form = new RuntimeFormData();\n      form.append('operations', serializeFetchParameter(clone, 'Payload'));\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        customFormDataAppendFile(form, ++i, file);\n      });\n      options.body = form;\n    } else {\n      if (useGETForQueries && !operation.query.definitions.some(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n      })) options.method = 'GET';\n\n      if (options.method === 'GET') {\n        var _rewriteURIForGET = rewriteURIForGET(uri, body),\n            newURI = _rewriteURIForGET.newURI,\n            parseError = _rewriteURIForGET.parseError;\n\n        if (parseError) return new Observable(function (observer) {\n          observer.error(parseError);\n        });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, 'Payload');\n    }\n\n    var _createSignalIfSuppor = createSignalIfSupported(),\n        controller = _createSignalIfSuppor.controller;\n\n    if (controller) {\n      if (options.signal) options.signal.addEventListener('abort', function () {\n        controller.abort();\n      });\n      options.signal = controller.signal;\n    }\n\n    var runtimeFetch = customFetch || fetch;\n    return new Observable(function (observer) {\n      var cleaningUp;\n      runtimeFetch(uri, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n      }).catch(function (error) {\n        if (!cleaningUp) {\n          if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n          observer.error(error);\n        }\n      });\n      return function () {\n        cleaningUp = true;\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/node_modules/apollo-upload-client/public/createUploadLink.js"],"names":["_extends","require","_require","ApolloLink","Observable","_require2","createSignalIfSupported","fallbackHttpConfig","parseAndCheckHttpResponse","rewriteURIForGET","selectHttpOptionsAndBody","selectURI","serializeFetchParameter","extractFiles","formDataAppendFile","isExtractableFile","module","exports","createUploadLink","_temp","_ref","_ref$uri","uri","fetchUri","useGETForQueries","_ref$isExtractableFil","customIsExtractableFile","CustomFormData","FormData","_ref$formDataAppendFi","customFormDataAppendFile","customFetch","fetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","_context$clientAwaren","clientAwareness","name","version","contextConfig","_selectHttpOptionsAnd","body","_extractFiles","clone","files","size","RuntimeFormData","form","append","map","i","forEach","paths","JSON","stringify","file","query","definitions","some","definition","kind","method","_rewriteURIForGET","newURI","parseError","observer","error","_createSignalIfSuppor","controller","signal","addEventListener","abort","runtimeFetch","cleaningUp","then","response","setContext","result","next","complete","catch","errors","data"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _extends = require('@babel/runtime/helpers/extends');\n\nvar _require = require('@apollo/client/core'),\n  ApolloLink = _require.ApolloLink,\n  Observable = _require.Observable;\n\nvar _require2 = require('@apollo/client/link/http'),\n  createSignalIfSupported = _require2.createSignalIfSupported,\n  fallbackHttpConfig = _require2.fallbackHttpConfig,\n  parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse,\n  rewriteURIForGET = _require2.rewriteURIForGET,\n  selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n  selectURI = _require2.selectURI,\n  serializeFetchParameter = _require2.serializeFetchParameter;\n\nvar extractFiles = require('extract-files/public/extractFiles');\n\nvar formDataAppendFile = require('./formDataAppendFile');\n\nvar isExtractableFile = require('./isExtractableFile');\n\nmodule.exports = function createUploadLink(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$uri = _ref.uri,\n    fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n    useGETForQueries = _ref.useGETForQueries,\n    _ref$isExtractableFil = _ref.isExtractableFile,\n    customIsExtractableFile =\n      _ref$isExtractableFil === void 0\n        ? isExtractableFile\n        : _ref$isExtractableFil,\n    CustomFormData = _ref.FormData,\n    _ref$formDataAppendFi = _ref.formDataAppendFile,\n    customFormDataAppendFile =\n      _ref$formDataAppendFi === void 0\n        ? formDataAppendFile\n        : _ref$formDataAppendFi,\n    customFetch = _ref.fetch,\n    fetchOptions = _ref.fetchOptions,\n    credentials = _ref.credentials,\n    headers = _ref.headers,\n    includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers,\n  };\n  return new ApolloLink(function (operation) {\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren =\n      _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n      version = _context$clientAwaren.version,\n      headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: _extends(\n        {},\n        name && {\n          'apollographql-client-name': name,\n        },\n        version && {\n          'apollographql-client-version': version,\n        },\n        headers\n      ),\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(\n        operation,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      ),\n      options = _selectHttpOptionsAnd.options,\n      body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body, '', customIsExtractableFile),\n      clone = _extractFiles.clone,\n      files = _extractFiles.files;\n\n    var uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var RuntimeFormData = CustomFormData || FormData;\n      var form = new RuntimeFormData();\n      form.append('operations', serializeFetchParameter(clone, 'Payload'));\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        customFormDataAppendFile(form, ++i, file);\n      });\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        !operation.query.definitions.some(function (definition) {\n          return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation'\n          );\n        })\n      )\n        options.method = 'GET';\n\n      if (options.method === 'GET') {\n        var _rewriteURIForGET = rewriteURIForGET(uri, body),\n          newURI = _rewriteURIForGET.newURI,\n          parseError = _rewriteURIForGET.parseError;\n\n        if (parseError)\n          return new Observable(function (observer) {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, 'Payload');\n    }\n\n    var _createSignalIfSuppor = createSignalIfSupported(),\n      controller = _createSignalIfSuppor.controller;\n\n    if (controller) {\n      if (options.signal)\n        options.signal.addEventListener('abort', function () {\n          controller.abort();\n        });\n      options.signal = controller.signal;\n    }\n\n    var runtimeFetch = customFetch || fetch;\n    return new Observable(function (observer) {\n      var cleaningUp;\n      runtimeFetch(uri, options)\n        .then(function (response) {\n          operation.setContext({\n            response: response,\n          });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(function (result) {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch(function (error) {\n          if (!cleaningUp) {\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n            observer.error(error);\n          }\n        });\n      return function () {\n        cleaningUp = true;\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}