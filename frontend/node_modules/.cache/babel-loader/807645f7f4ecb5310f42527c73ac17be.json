{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\Username.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIND = gql`\n    query find($userid:[String]){\n      finduser(ids:$userid){\n        _id\n        username\n        email\n        isGuest\n      }\n    }\n`;\nexport default function Username(ids) {\n  _s();\n\n  let speakers = [];\n  ids.ids.map(id => {\n    speakers.push(id.speaker);\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(FIND, {\n    variables: {\n      userid: speakers\n    }\n  });\n  if (loading) return null; // return data.finduser.username\n\n  let users = [];\n  data.finduser.map(user => {\n    users.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"user.username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Username, \"hLsNeCM6uPLZqykYOKQzV+Uk/qM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Username;\n\nvar _c;\n\n$RefreshReg$(_c, \"Username\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/Username.js"],"names":["React","useState","gql","useQuery","FIND","Username","ids","speakers","map","id","push","speaker","loading","error","data","variables","userid","users","finduser","user"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAAUC,GAAV,EAAeC,QAAf,QAA+B,gBAA/B;;AAKA,MAAMC,IAAI,GAAGF,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAYA,eAAe,SAASG,QAAT,CAAkBC,GAAlB,EAAsB;AAAA;;AACjC,MAAIC,QAAQ,GAAG,EAAf;AACAD,EAAAA,GAAG,CAACA,GAAJ,CAAQE,GAAR,CAAYC,EAAE,IAAE;AACZF,IAAAA,QAAQ,CAACG,IAAT,CAAcD,EAAE,CAACE,OAAjB;AACH,GAFD;AAGA,QAAK;AAAEC,IAAAA,OAAF;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,MAAwBX,QAAQ,CAACC,IAAD,EAAM;AACvCW,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAACT;AAAR;AAD4B,GAAN,CAArC;AAGE,MAAIK,OAAJ,EAAa,OAAO,IAAP,CARkB,CAUjC;;AACA,MAAIK,KAAK,GAAC,EAAV;AACAH,EAAAA,IAAI,CAACI,QAAL,CAAcV,GAAd,CAAkBW,IAAI,IAAE;AACpBF,IAAAA,KAAK,CAACP,IAAN,eACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAND;AASA,sBAAO;AAAA,2BACH;AAAA,gBACKO;AADL;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH;;GA1BuBZ,Q;UAKSF,Q;;;KALTE,Q","sourcesContent":["\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport {  gql, useQuery } from '@apollo/client'\r\n\r\n\r\n\r\n\r\nconst FIND = gql`\r\n    query find($userid:[String]){\r\n      finduser(ids:$userid){\r\n        _id\r\n        username\r\n        email\r\n        isGuest\r\n      }\r\n    }\r\n`\r\n\r\n\r\nexport default function Username(ids){\r\n    let speakers = []\r\n    ids.ids.map(id=>{\r\n        speakers.push(id.speaker)\r\n    })\r\n    const{ loading,error,data} = useQuery(FIND,{\r\n        variables: {userid:speakers}\r\n      })\r\n      if (loading) return null\r\n    \r\n    // return data.finduser.username\r\n    let users=[]\r\n    data.finduser.map(user=>{\r\n        users.push(\r\n            <li>\r\n                <h3>user.username</h3>\r\n            </li>\r\n        )\r\n    })\r\n    \r\n   \r\n    return <div>\r\n        <ul>\r\n            {users}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}