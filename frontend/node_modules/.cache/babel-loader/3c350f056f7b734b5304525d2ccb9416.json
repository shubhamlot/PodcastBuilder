{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\EpisodeDisplay.js\",\n    _s = $RefreshSig$();\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { createMuiTheme, Grid, makeStyles, Paper, ThemeProvider } from '@material-ui/core';\nimport logo from \"../logo.svg\";\nimport { useContext } from 'react';\nimport AuthContext from '../context/auth-context';\nimport FindEpisode from './FindEpisode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: 20,\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column'\n  },\n  text: {\n    padding: 40,\n    color: \"#ffffff\"\n  }\n}));\nconst EPISODEDISPLAY = gql`\n  query displayEpisode ($userId:String){\n      displayEpisode(userId:$userId)\n  }\n`;\nconst GET_EPISODE = gql`\n   query reviewEpisode($EpisodeID:String){\n    reviewEpisode(EpisodeID:$EpisodeID){\n        EpisodeName\n        discription\n        audioFile\n    }\n  }\n`;\nexport default function EpisodeDisplay() {\n  _s();\n\n  const classes = useStyles();\n  const auth = useContext(AuthContext);\n  const theme = createMuiTheme({\n    palette: {\n      type: \"dark\"\n    }\n  });\n  const {\n    loading,\n    data\n  } = useQuery(EPISODEDISPLAY, {\n    variables: {\n      userId: auth.userId\n    } //   pollInterval: 500,\n\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 22\n  }, this);\n  console.log(data.displayEpisode);\n\n  if (data) {\n    let bucket = [];\n    data.displayEpisode.map(data => {\n      bucket.push( /*#__PURE__*/_jsxDEV(FindEpisode, {\n        param: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this));\n    });\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: data.displayEpisode.map(data => {\n          console.log(data); // <FindEpisode param={data}/>\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.text,\n        children: \"Hmm... Seems Like You have not created any Episode Yet !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.text,\n        children: \"Be a Creator to share your idea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(EpisodeDisplay, \"Ro+SSnoDgCBVr8w8rc0VkZwgWq0=\", false, function () {\n  return [useStyles, useQuery];\n});\n\n_c = EpisodeDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"EpisodeDisplay\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/EpisodeDisplay.js"],"names":["gql","useMutation","useQuery","createMuiTheme","Grid","makeStyles","Paper","ThemeProvider","useContext","AuthContext","FindEpisode","useStyles","theme","paper","padding","spacing","margin","display","overflow","flexDirection","text","color","EPISODEDISPLAY","GET_EPISODE","EpisodeDisplay","classes","auth","palette","type","loading","data","variables","userId","console","log","displayEpisode","bucket","map","push"],"mappings":";;;AACA,SAAQA,GAAR,EAAaC,WAAb,EAA0BC,QAA1B,QAAyC,gBAAzC;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,KAA3C,EAAkDC,aAAlD,QAAuE,mBAAvE;;AAEA,SAAQC,UAAR,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAU;AACnCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADN;AAEHC,IAAAA,MAAM,EAAC,EAFJ;AAGHC,IAAAA,OAAO,EAAE,MAHN;AAIHC,IAAAA,QAAQ,EAAE,MAJP;AAKHC,IAAAA,aAAa,EAAE;AALZ,GAD4B;AAQjCC,EAAAA,IAAI,EAAC;AACHN,IAAAA,OAAO,EAAC,EADL;AAEHO,IAAAA,KAAK,EAAC;AAFH;AAR4B,CAAV,CAAD,CAA5B;AAeA,MAAMC,cAAc,GAAGtB,GAAI;AAC3B;AACA;AACA;AACA,CAJA;AAMA,MAAMuB,WAAW,GAAGvB,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,eAAe,SAASwB,cAAT,GAAyB;AAAA;;AACpC,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAMe,IAAI,GAAGlB,UAAU,CAACC,WAAD,CAAvB;AACA,QAAMG,KAAK,GAAGT,cAAc,CAAC;AAC3BwB,IAAAA,OAAO,EAAC;AACNC,MAAAA,IAAI,EAAC;AADC;AADmB,GAAD,CAA5B;AAMA,QAAK;AAAEC,IAAAA,OAAF;AAAUC,IAAAA;AAAV,MAAkB5B,QAAQ,CAACoB,cAAD,EAAgB;AAC7CS,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAACN,IAAI,CAACM;AAAb,KADkC,CAE/C;;AAF+C,GAAhB,CAA/B;AAOD,MAAGH,OAAH,EAAY,oBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AACXI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,cAAjB;;AAEA,MAAGL,IAAH,EAAQ;AACR,QAAIM,MAAM,GAAG,EAAb;AAEAN,IAAAA,IAAI,CAACK,cAAL,CAAoBE,GAApB,CAAwBP,IAAI,IAAE;AAC5BM,MAAAA,MAAM,CAACE,IAAP,eAAY,QAAC,WAAD;AAAa,QAAA,KAAK,EAAER;AAApB;AAAA;AAAA;AAAA;AAAA,cAAZ;AACD,KAFD;AAIA,wBACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAElB,KAAtB;AAAA,6BAIA,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,kBACGkB,IAAI,CAACK,cAAL,CAAoBE,GAApB,CAAwBP,IAAI,IAAE;AAC/BG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAD+B,CAEjC;AACD,SAHI;AADH;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD,GArBC,MAuBE;AACF,wBACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAElB,KAAtB;AAAA,8BACA;AAAI,QAAA,SAAS,EAAEa,OAAO,CAACL,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAI,QAAA,SAAS,EAAEK,OAAO,CAACL,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;AACF;;GAjDuBI,c;UACJb,S,EAQOT,Q;;;KATHsB,c","sourcesContent":["\r\nimport {gql, useMutation, useQuery} from '@apollo/client';\r\nimport { createMuiTheme, Grid, makeStyles, Paper, ThemeProvider } from '@material-ui/core'\r\nimport logo from '../logo.svg'\r\nimport {useContext} from 'react'\r\nimport AuthContext from '../context/auth-context'\r\nimport FindEpisode from './FindEpisode'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        margin:20,\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n      },\r\n      text:{\r\n        padding:40,\r\n        color:\"#ffffff\"\r\n      }\r\n}))\r\n\r\n\r\nconst EPISODEDISPLAY = gql`\r\n  query displayEpisode ($userId:String){\r\n      displayEpisode(userId:$userId)\r\n  }\r\n`\r\n\r\nconst GET_EPISODE = gql`\r\n   query reviewEpisode($EpisodeID:String){\r\n    reviewEpisode(EpisodeID:$EpisodeID){\r\n        EpisodeName\r\n        discription\r\n        audioFile\r\n    }\r\n  }\r\n`\r\n\r\nexport default function EpisodeDisplay(){\r\n    const classes = useStyles()\r\n    const auth = useContext(AuthContext)\r\n    const theme = createMuiTheme({\r\n      palette:{\r\n        type:\"dark\"\r\n      }\r\n    })\r\n\r\n    const{ loading,data} = useQuery(EPISODEDISPLAY,{\r\n      variables: {userId:auth.userId},\r\n    //   pollInterval: 500,\r\n    })\r\n\r\n\r\n\r\n   if(loading) return<p>loading</p>\r\n    console.log(data.displayEpisode)\r\n\r\n    if(data){\r\n    let bucket = []\r\n\r\n    data.displayEpisode.map(data=>{\r\n      bucket.push(<FindEpisode param={data}/>)\r\n    })\r\n  \r\n    return(\r\n      <ThemeProvider theme={theme}>\r\n\r\n      \r\n\r\n      <Grid container spacing={3}>\r\n       { data.displayEpisode.map(data=>{\r\n        console.log(data)\r\n      // <FindEpisode param={data}/>\r\n    })}\r\n\r\n    </Grid>\r\n    </ThemeProvider>\r\n    )\r\n  }\r\n\r\n  else{\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n      <h1 className={classes.text}>Hmm... Seems Like You have not created any Episode Yet !</h1>\r\n      <h1 className={classes.text}>Be a Creator to share your idea</h1>\r\n      </ThemeProvider>)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}