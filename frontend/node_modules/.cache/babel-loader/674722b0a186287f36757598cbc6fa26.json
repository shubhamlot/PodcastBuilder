{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\componets2\\\\Reactmic.js\",\n    _s = $RefreshSig$();\n\nimport { ReactMic } from 'react-mic';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AudioProcess } from './AudioProcess';\nimport { gql, useMutation } from '@apollo/client';\nimport { Button, Container, Grid, Icon, IconButton, ThemeProvider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Redirect, useParams } from 'react-router';\nimport AuthContext from '../context/auth-context';\nimport { Link } from 'react-router-dom';\nimport { saveAs } from 'file-saver';\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar toWav = require('audiobuffer-to-wav');\n\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\n  }\n`;\nconst useStyles = makeStyles(theme => ({\n  buttonroot: {\n    display: 'flex',\n    width: '100%'\n  },\n  startbutton: {\n    flex: 1,\n    color: 'blue'\n  },\n  stopbutton: {\n    flex: 1,\n    color: \"red\"\n  },\n  donebutton: {\n    flex: 1,\n    color: \"green\",\n    textDecoration: 'none'\n  },\n  container: {\n    padding: 10\n  },\n  control: {\n    display: \"flex\"\n  },\n  icon: {\n    flex: 1,\n    textAlign: \"center\"\n  },\n  iconmic: {\n    flex: 1,\n    textAlign: \"center\",\n    color: \"red\"\n  }\n}));\nexport default function Reactmic(props) {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n  const [state, setState] = useState({\n    record: false\n  });\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    onCompleted: data => console.log(data)\n  });\n\n  const blobToFile = superBlob => {\n    return superBlob;\n  };\n\n  const startRecording = () => {\n    setState({\n      record: true\n    });\n  };\n\n  const stopRecording = () => {\n    setState({\n      record: false\n    });\n  };\n\n  const {\n    room\n  } = useParams();\n\n  const audioProcess = file => {\n    let speaker = auth.userId;\n    if (!file) return;\n    uploadFile({\n      variables: {\n        file,\n        roomid: room,\n        speaker: speaker\n      }\n    });\n  };\n\n  const onStop = recordedBlob => {\n    let recording = blobToFile(recordedBlob.blob); // audioProcess(recording)\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    // <ReactMic\n    //   width=\"290\"\n    //   record={state.record}\n    //   className={classes.soundwav}\n    //   onStop={onStop}\n    //   strokeColor=\"#ffffff\"\n    //   backgroundColor=\"#1976d2\"\n    //   bitRate={256000}     \n    //   sampleRate={96000}\n    //   timeSlice={3000} \n    //   minetype=\"audio/wav\"\n    //   />\n    // {/* <button onClick={startRecording} type=\"button\">Start</button>\n    // <button onClick={stopRecording} type=\"button\">Stop</button> */}\n    // <div className={classes.buttonroot}>\n    // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\n    // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\n    // <Button className={classes.donebutton} >\n    // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\n    // </Button>\n    // </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.iconmic,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            children: /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.icon,\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            children: /*#__PURE__*/_jsxDEV(Done, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Reactmic, \"fa123Jb/xPRY6O5yeUm/IQfV/Qo=\", false, function () {\n  return [useStyles, useMutation, useParams];\n});\n\n_c = Reactmic;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reactmic\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/componets2/Reactmic.js"],"names":["ReactMic","React","useContext","useEffect","useState","AudioProcess","gql","useMutation","Button","Container","Grid","Icon","IconButton","ThemeProvider","makeStyles","Redirect","useParams","AuthContext","Link","saveAs","Done","Mic","PlayArrow","Stop","toWav","require","UPLOAD_FILE","useStyles","theme","buttonroot","display","width","startbutton","flex","color","stopbutton","donebutton","textDecoration","container","padding","control","icon","textAlign","iconmic","Reactmic","props","auth","classes","state","setState","record","uploadFile","onCompleted","data","console","log","blobToFile","superBlob","startRecording","stopRecording","room","audioProcess","file","speaker","userId","variables","roomid","onStop","recordedBlob","recording","blob"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\r\nimport React, { useContext, useEffect, useState } from 'react' \r\nimport {AudioProcess} from './AudioProcess'\r\nimport {gql, useMutation} from '@apollo/client';\r\nimport {Button, Container, Grid, Icon, IconButton, ThemeProvider} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport AuthContext from '../context/auth-context'\r\nimport { Link } from 'react-router-dom';\r\nimport {saveAs} from 'file-saver'\r\nimport { Done, Mic, PlayArrow, Stop } from '@material-ui/icons';\r\n\r\n\r\nvar toWav = require('audiobuffer-to-wav')\r\nconst UPLOAD_FILE = gql`\r\n  mutation UploadFile($file:Upload!,$roomid:String,$speaker:String){\r\n      UploadFile(file:$file,roomid:$roomid,speaker:$speaker)\r\n  }\r\n`\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n  buttonroot:{\r\n    display:'flex',\r\n    width:'100%',\r\n  },\r\n  startbutton:{\r\n    flex:1,\r\n    color:'blue'\r\n  },\r\n  stopbutton:{\r\n    flex:1,\r\n    color:\"red\"\r\n  },\r\n  donebutton:{\r\n    flex:1,\r\n    color:\"green\",\r\n    textDecoration:'none'\r\n  },\r\n  \r\n  container:{\r\n    padding:10\r\n  },\r\n  control:{\r\n    display:\"flex\"\r\n  },\r\n  icon:{\r\n    flex:1,\r\n    textAlign:\"center\"\r\n  },\r\n  iconmic:{\r\n    flex:1,\r\n    textAlign:\"center\",\r\n    color:\"red\"\r\n  }\r\n\r\n}))\r\n\r\n\r\nexport default function Reactmic(props){\r\n\r\n\r\n  const auth = useContext(AuthContext)\r\n    \r\n  \r\n\r\n  const classes = useStyles();\r\n  \r\n    const [state,setState] = useState({\r\n        record:false,\r\n      \r\n    })\r\n\r\n    const[uploadFile] = useMutation(UPLOAD_FILE,{\r\n        onCompleted: data => console.log(data),\r\n      })\r\n \r\n  const blobToFile=(superBlob)=>{\r\n    \r\n   \r\n    return superBlob;\r\n}\r\n\r\n  const startRecording = () => {\r\n    setState({ record: true });\r\n  }\r\n \r\n  const stopRecording = () => {\r\n    setState({ record: false });\r\n  }\r\n  const { room } = useParams()\r\n\r\n  const audioProcess=(file)=>{\r\n    \r\n    let speaker = auth.userId\r\n    \r\n    if(!file) return\r\n    uploadFile({ variables: { file,roomid:room,speaker:speaker } })\r\n    \r\n  }\r\n \r\n  const onStop=(recordedBlob)=> {\r\n    \r\n    let recording = blobToFile(recordedBlob.blob)\r\n    \r\n    \r\n    // audioProcess(recording)\r\n  \r\n  }\r\n \r\n\r\n    return (\r\n      \r\n        \r\n        // <div>\r\n        // <ReactMic\r\n        //   width=\"290\"\r\n          \r\n        //   record={state.record}\r\n        //   className={classes.soundwav}\r\n        //   onStop={onStop}\r\n        //   strokeColor=\"#ffffff\"\r\n        //   backgroundColor=\"#1976d2\"\r\n        //   bitRate={256000}     \r\n        //   sampleRate={96000}\r\n        //   timeSlice={3000} \r\n        //   minetype=\"audio/wav\"\r\n        //   />\r\n        // {/* <button onClick={startRecording} type=\"button\">Start</button>\r\n        // <button onClick={stopRecording} type=\"button\">Stop</button> */}\r\n        // <div className={classes.buttonroot}>\r\n        // <Button className={classes.startbutton} onClick={startRecording}>Start</Button>\r\n        // <Button className={classes.stopbutton} onClick={stopRecording}>Stop</Button>\r\n        // <Button className={classes.donebutton} >\r\n        // <Link className={classes.donebutton} to={`roomID=${room}/editpodcast`} >Done</Link>\r\n        // </Button>\r\n        // </div>\r\n        // </div>\r\n\r\n        <div className={classes.container}>\r\n          <div className={classes.control}>\r\n          \r\n           \r\n            <IconButton className={classes.iconmic}>\r\n              <Icon>\r\n                <Mic/>\r\n              </Icon>\r\n            </IconButton><IconButton className={classes.icon}>\r\n              <Icon>\r\n                <Done/>\r\n              </Icon>\r\n            </IconButton>\r\n            \r\n\r\n          </div>\r\n        </div>\r\n\r\n      \r\n    )\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}