{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\FindEpisode.js\",\n    _s = $RefreshSig$();\n\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { useContext } from 'react';\nimport { createMuiTheme, Grid, makeStyles, Paper, ThemeProvider } from '@material-ui/core';\nimport logo from \"../logo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: 20,\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column'\n  }\n}));\nconst GET_EPISODE = gql`\n   query reviewEpisode($EpisodeID:String){\n    reviewEpisode(EpisodeID:$EpisodeID){\n        EpisodeName\n        discription\n        img\n    }\n  }\n`;\nexport default function FindEpisode(param) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    loading,\n    data\n  } = useQuery(GET_EPISODE, {\n    variables: {\n      EpisodeID: param.param\n    } //   pollInterval: 500,\n\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 22\n  }, this);\n  console.log(data.reviewEpisode);\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:4000/images/${data.reviewEpisode.img}`,\n          alt: \"pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: data.reviewEpisode.EpisodeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: data.reviewEpisode.discription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(FindEpisode, \"DwypvNLheCI32uPWrhjfNakwnMY=\", false, function () {\n  return [useStyles, useQuery];\n});\n\n_c = FindEpisode;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindEpisode\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/FindEpisode.js"],"names":["gql","useMutation","useQuery","useContext","createMuiTheme","Grid","makeStyles","Paper","ThemeProvider","useStyles","theme","paper","padding","spacing","margin","display","overflow","flexDirection","GET_EPISODE","FindEpisode","param","classes","loading","data","variables","EpisodeID","console","log","reviewEpisode","img","EpisodeName","discription"],"mappings":";;;AACA,SAAQA,GAAR,EAAaC,WAAb,EAA0BC,QAA1B,QAAyC,gBAAzC;AACA,SAAQC,UAAR,QAAyB,OAAzB;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,KAA3C,EAAkDC,aAAlD,QAAuE,mBAAvE;;;AAGA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAU;AACnCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADN;AAEHC,IAAAA,MAAM,EAAC,EAFJ;AAGHC,IAAAA,OAAO,EAAE,MAHN;AAIHC,IAAAA,QAAQ,EAAE,MAJP;AAKHC,IAAAA,aAAa,EAAE;AALZ;AAD4B,CAAV,CAAD,CAA5B;AAUA,MAAMC,WAAW,GAAGlB,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,eAAe,SAASmB,WAAT,CAAqBC,KAArB,EAA2B;AAAA;;AAExC,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACC,QAAK;AAAEa,IAAAA,OAAF;AAAUC,IAAAA;AAAV,MAAkBrB,QAAQ,CAACgB,WAAD,EAAa;AACzCM,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAACL,KAAK,CAACA;AAAjB,KAD8B,CAE3C;;AAF2C,GAAb,CAA/B;AAIA,MAAGE,OAAH,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACVI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,aAAjB;;AACF,MAAGL,IAAH,EAAQ;AACR,wBAEM,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEF,OAAO,CAACV,KAA1B;AAAA,6BACI;AAAA,gCACA;AAAK,UAAA,GAAG,EAAG,gCAA+BY,IAAI,CAACK,aAAL,CAAmBC,GAAI,EAAjE;AAAoE,UAAA,GAAG,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA,oBAAKN,IAAI,CAACK,aAAL,CAAmBE;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAA,oBAAIP,IAAI,CAACK,aAAL,CAAmBG;AAAvB;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFN;AAYG;AACJ;;GAvBuBZ,W;UAENV,S,EACQP,Q;;;KAHFiB,W","sourcesContent":["\r\nimport {gql, useMutation, useQuery} from '@apollo/client';\r\nimport {useContext} from 'react'\r\nimport { createMuiTheme, Grid, makeStyles, Paper, ThemeProvider } from '@material-ui/core'\r\nimport logo from '../logo.svg'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        margin:20,\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n      },\r\n}))\r\n\r\nconst GET_EPISODE = gql`\r\n   query reviewEpisode($EpisodeID:String){\r\n    reviewEpisode(EpisodeID:$EpisodeID){\r\n        EpisodeName\r\n        discription\r\n        img\r\n    }\r\n  }\r\n`\r\n\r\nexport default function FindEpisode(param){\r\n\r\n  const classes = useStyles()\r\n   const{ loading,data} = useQuery(GET_EPISODE,{\r\n      variables: {EpisodeID:param.param},\r\n    //   pollInterval: 500,\r\n    })\r\n   if(loading)return <p>loading..</p>\r\n    console.log(data.reviewEpisode)\r\n  if(data){\r\n  return (\r\n\r\n        <Paper className={classes.paper}>\r\n            <div>\r\n            <img src={`http://localhost:4000/images/${data.reviewEpisode.img}`} alt=\"pic\"/>\r\n            <h3>{data.reviewEpisode.EpisodeName}</h3>\r\n            <p>{data.reviewEpisode.discription}</p>\r\n            </div>\r\n            </Paper>\r\n      \r\n     \r\n      )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}