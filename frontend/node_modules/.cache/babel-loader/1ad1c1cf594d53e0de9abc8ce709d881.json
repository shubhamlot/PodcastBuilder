{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\Files.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport Username from './Username';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SHOW_FILE = gql`\n  query file ($roomid:String){\n      files(roomid:$roomid){\n        _id\n        speaker\n        file\n      }\n  }\n`;\nexport default function FS(params) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SHOW_FILE, {\n    variables: {\n      roomid: \"a887d8ae-3c6b-413f-a7fc-0ae0c8311dbe\"\n    }\n  });\n  if (loading) return null;\n  let audio = [];\n  let users = []; // console.log(data.files)\n\n  data.files.map(voice => {\n    users.push({\n      // _id:voice._id,\n      speaker: voice.speaker\n    });\n    audio.push( /*#__PURE__*/_jsxDEV(\"audio\", {\n      controls: true,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: `http://localhost:4000/Audio/${voice.file}`,\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, voice._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), audio, /*#__PURE__*/_jsxDEV(Username, {\n      ids: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n}\n\n_s(FS, \"hLsNeCM6uPLZqykYOKQzV+Uk/qM=\", false, function () {\n  return [useQuery];\n});\n\n_c = FS;\n\nvar _c;\n\n$RefreshReg$(_c, \"FS\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/Files.js"],"names":["React","useState","gql","useQuery","Username","SHOW_FILE","FS","params","loading","error","data","variables","roomid","audio","users","files","map","voice","push","speaker","file","_id"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAAUC,GAAV,EAAeC,QAAf,QAA+B,gBAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,SAAS,GAAGH,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAWA,eAAe,SAASI,EAAT,CAAYC,MAAZ,EAAmB;AAAA;;AAC9B,QAAK;AAAEC,IAAAA,OAAF;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,MAAwBP,QAAQ,CAACE,SAAD,EAAW;AAC9CM,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR;AADmC,GAAX,CAArC;AAMA,MAAIJ,OAAJ,EAAa,OAAO,IAAP;AAGb,MAAIK,KAAK,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ,CAX8B,CAY9B;;AACAJ,EAAAA,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAgBC,KAAD,IAAS;AACpBH,IAAAA,KAAK,CAACI,IAAN,CAAW;AACT;AACAC,MAAAA,OAAO,EAACF,KAAK,CAACE;AAFL,KAAX;AAIAN,IAAAA,KAAK,CAACK,IAAN,eACI;AAAuB,MAAA,QAAQ,MAA/B;AAAA,6BAEF;AAAS,QAAA,GAAG,EAAG,+BAA8BD,KAAK,CAACG,IAAK,EAAxD;AAA2D,QAAA,IAAI,EAAC;AAAhE;AAAA;AAAA;AAAA;AAAA;AAFE,OAAYH,KAAK,CAACI,GAAlB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMC,GAXL;AAgBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGR,KAFH,eAGE,QAAC,QAAD;AAAU,MAAA,GAAG,EAAEC;AAAf;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOH;;GApCuBR,E;UACSH,Q;;;KADTG,E","sourcesContent":["\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport {  gql, useQuery } from '@apollo/client'\r\nimport Username from './Username'\r\n\r\nconst SHOW_FILE = gql`\r\n  query file ($roomid:String){\r\n      files(roomid:$roomid){\r\n        _id\r\n        speaker\r\n        file\r\n      }\r\n  }\r\n`\r\n\r\n\r\nexport default function FS(params){\r\n    const{ loading,error,data} = useQuery(SHOW_FILE,{\r\n      variables: {roomid:\"a887d8ae-3c6b-413f-a7fc-0ae0c8311dbe\"}\r\n    })\r\n   \r\n    \r\n   \r\n    if (loading) return null\r\n\r\n     \r\n    let audio = []\r\n    let users = []\r\n    // console.log(data.files)\r\n    data.files.map((voice)=>{\r\n        users.push({\r\n          // _id:voice._id,\r\n          speaker:voice.speaker\r\n        })\r\n        audio.push(\r\n            <audio key={voice._id} controls>\r\n            \r\n          <source  src={`http://localhost:4000/Audio/${voice.file}`} type=\"audio/mpeg\"></source>\r\n        </audio>\r\n        )\r\n        }\r\n       \r\n    )\r\n    \r\n\r\n    return(\r\n      <div >\r\n        <h1>click</h1>\r\n        {audio}\r\n        <Username ids={users}/>\r\n      </div>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}