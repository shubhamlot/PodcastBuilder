{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectFolder\\\\Podcast Builder\\\\frontend\\\\src\\\\components\\\\Username.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIND = gql`\n    query find($userid:[String]){\n      finduser(id:$userid){\n        _id\n        username\n        email\n        isGuest\n      }\n    }\n`;\nexport default function Username(ids) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(FIND, {\n    variables: {\n      userid: ids.param\n    }\n  });\n  if (loading) return null;\n  console.log(data); // return data.finduser.username\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Username, \"hLsNeCM6uPLZqykYOKQzV+Uk/qM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Username;\n\nvar _c;\n\n$RefreshReg$(_c, \"Username\");","map":{"version":3,"sources":["D:/ProjectFolder/Podcast Builder/frontend/src/components/Username.js"],"names":["React","useState","gql","useQuery","FIND","Username","ids","loading","error","data","variables","userid","param","console","log"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAAUC,GAAV,EAAeC,QAAf,QAA+B,gBAA/B;;AAKA,MAAMC,IAAI,GAAGF,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAYA,eAAe,SAASG,QAAT,CAAkBC,GAAlB,EAAsB;AAAA;;AACjC,QAAK;AAAEC,IAAAA,OAAF;AAAUC,IAAAA,KAAV;AAAgBC,IAAAA;AAAhB,MAAwBN,QAAQ,CAACC,IAAD,EAAM;AACvCM,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAACL,GAAG,CAACM;AAAZ;AAD4B,GAAN,CAArC;AAGE,MAAIL,OAAJ,EAAa,OAAO,IAAP;AACfM,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EALiC,CAMjC;;AAGA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAVuBJ,Q;UACSF,Q;;;KADTE,Q","sourcesContent":["\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport {  gql, useQuery } from '@apollo/client'\r\n\r\n\r\n\r\n\r\nconst FIND = gql`\r\n    query find($userid:[String]){\r\n      finduser(id:$userid){\r\n        _id\r\n        username\r\n        email\r\n        isGuest\r\n      }\r\n    }\r\n`\r\n\r\n\r\nexport default function Username(ids){\r\n    const{ loading,error,data} = useQuery(FIND,{\r\n        variables: {userid:ids.param}\r\n      })\r\n      if (loading) return null\r\n    console.log(data)\r\n    // return data.finduser.username\r\n    \r\n   \r\n    return <h1>hi</h1>\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}